{
  "openapi": "3.0.1",
  "info": {
    "title": "FINBOURNE Workflow API",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.1.623",
    "x-logo": {
      "url": "https://www.lusid.com/app/assets/logo_white.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "https://www.lusid.com/workflow"
    }
  ],
  "paths": {
    "/api/taskdefinitions": {
      "post": {
        "tags": [
          "Task Definitions"
        ],
        "summary": "[EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition",
        "operationId": "CreateTaskDefinition",
        "requestBody": {
          "description": "The data to create a Task Definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDefinitionRequest"
              },
              "example": {"id":{"scope":"A1","code":"ZZZ"},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDefinitionRequest"
              },
              "example": {"id":{"scope":"A1","code":"ZZZ"},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDefinitionRequest"
              },
              "example": {"id":{"scope":"A1","code":"ZZZ"},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskDefinitionRequest"
              },
              "example": {"id":{"scope":"A1","code":"ZZZ"},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinition"
                },
                "example": {"id":{"scope":"A1","code":"ZZZ"},"version":{"asAtCreated":"2022-01-01T01:02:03.0000000+00:00","userIdCreated":"User-1","requestIdCreated":"RequestId-1","asAtModified":"2022-01-01T01:02:03.0000000+00:00","userIdModified":"User-1","requestIdModified":"RequestId-1","asAtVersionNumber":1},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Task Definitions"
        ],
        "summary": "[EXPERIMENTAL] ListTaskDefinitions: List Task Definitions",
        "operationId": "ListTaskDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Task Definitions. Defaults to return the latest version of each Task Definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here: https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing task definitions from a previous call to list task definitions. This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Task Definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfTaskDefinition"
                },
                "example": {"values":[{"id":{"scope":"A1","code":"ZZZ"},"version":{"asAtCreated":"2022-01-01T01:02:03.0000000+00:00","userIdCreated":"User-1","requestIdCreated":"RequestId-1","asAtModified":"2022-01-01T01:02:03.0000000+00:00","userIdModified":"User-1","requestIdModified":"RequestId-1","asAtVersionNumber":1},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}]}],"links":[]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No Task Definitions found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/taskdefinitions/{scope}/{code}": {
      "get": {
        "tags": [
          "Task Definitions"
        ],
        "summary": "[EXPERIMENTAL] GetTaskDefinition: Get a Task Definition",
        "operationId": "GetTaskDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Task Definition. Defaults to returning the latest version of the Task Definition if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinition"
                },
                "example": {"id":{"scope":"A1","code":"ZZZ"},"version":{"asAtCreated":"2022-01-01T01:02:03.0000000+00:00","userIdCreated":"User-1","requestIdCreated":"RequestId-1","asAtModified":"2022-01-01T01:02:03.0000000+00:00","userIdModified":"User-1","requestIdModified":"RequestId-1","asAtVersionNumber":1},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Task Definition not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "put": {
        "tags": [
          "Task Definitions"
        ],
        "summary": "[EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition",
        "operationId": "UpdateTaskDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data to update a Task Definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskDefinitionRequest"
              },
              "example": {"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskDefinitionRequest"
              },
              "example": {"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskDefinitionRequest"
              },
              "example": {"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskDefinitionRequest"
              },
              "example": {"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinition"
                },
                "example": {"id":{"scope":"A1","code":"ZZZ"},"version":{"asAtCreated":"2022-01-01T01:02:03.0000000+00:00","userIdCreated":"User-1","requestIdCreated":"RequestId-1","asAtModified":"2022-01-01T01:02:03.0000000+00:00","userIdModified":"User-1","requestIdModified":"RequestId-1","asAtVersionNumber":1},"displayName":"An example TaskDefinition","description":"Test","states":[{"name":"Submitted"},{"name":"InProgress"},{"name":"SendingSurvey"},{"name":"Done"},{"name":"SurveyNotSent"},{"name":"NotDone"}],"fieldSchema":[{"name":"clientId","type":"String"},{"name":"assignee","type":"String"},{"name":"resolutionDetail","type":"String"}],"initialState":{"name":"Submitted","requiredFields":["clientId"]},"triggers":[{"name":"start","trigger":{"type":"External"}},{"name":"cancel","trigger":{"type":"External"}},{"name":"resolve","trigger":{"type":"External"}},{"name":"timeout","trigger":{"type":"External"}},{"name":"success","trigger":{"type":"External"}},{"name":"failure","trigger":{"type":"External"}}],"actions":[{"name":"health-check","actionDetails":{"type":"RunWorker","workerId":{"scope":"Health","code":"HealthCheckWorker"},"workerAsAt":"2022-01-01T01:02:03.0000000+00:00","workerParameters":{},"workerStatusTriggers":{"started":null,"completedWithResults":null,"completedNoResults":null,"failedToStart":null,"failedToComplete":null},"childTaskConfigurations":[{"taskDefinitionId":{"scope":"AAA","code":"BBB"},"childTaskFields":{"assignee":{"mapFrom":"foo","setTo":"bar"}},"resultMatchingPattern":null,"taskDefinitionAsAt":null,"initialTrigger":"test-trigger"}]}}],"transitions":[{"fromState":"Submitted","toState":"InProgress","trigger":"start","guard":"fields['assignee'] exists AND fields['assignee'] NOT eq ''"},{"fromState":"InProgress","toState":"SendingSurvey","trigger":"resolve","guard":"fields['resolutionDetail'] exists AND fields['resolutionDetail'] NOT eq ''","action":"health-check"},{"fromState":"SendingSurvey","toState":"Done","trigger":"success"},{"fromState":"SendingSurvey","toState":"SurveyNotSent","trigger":"failure"},{"fromState":"SendingSurvey","toState":"NotDone","trigger":"timeout"},{"fromState":"InProgress","toState":"NotDone","trigger":"cancel","guard":"fields['cancellationDetail'] exists AND fields['cancellationDetail'] NOT eq ''"}]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Task Definition not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Task Definitions"
        ],
        "summary": "[EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition",
        "operationId": "DeleteTaskDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Task Definition not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/taskdefinitions/{scope}/{code}/tasks": {
      "get": {
        "tags": [
          "Task Definitions"
        ],
        "summary": "[EXPERIMENTAL] ListTasksForTaskDefinition: List Tasks for a Task Definition",
        "operationId": "ListTasksForTaskDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code that identifies a Task Definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Tasks. Defaults to return the latest version of each Task if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfTask"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No tasks found for this Task Definition.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "[EXPERIMENTAL] CreateTask: Create a new Task",
        "operationId": "CreateTask",
        "parameters": [
          {
            "name": "trigger",
            "in": "query",
            "description": "The name of the Trigger to invoke",
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to create Task",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              },
              "example": {"taskDefinitionId":{"scope":"A1","code":"ZZZ"},"correlationIds":["correlation-id"],"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee"},{"name":"resolutionDetail","value":""}]}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              },
              "example": {"taskDefinitionId":{"scope":"A1","code":"ZZZ"},"correlationIds":["correlation-id"],"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee"},{"name":"resolutionDetail","value":""}]}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              },
              "example": {"taskDefinitionId":{"scope":"A1","code":"ZZZ"},"correlationIds":["correlation-id"],"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee"},{"name":"resolutionDetail","value":""}]}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              },
              "example": {"taskDefinitionId":{"scope":"A1","code":"ZZZ"},"correlationIds":["correlation-id"],"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee"},{"name":"resolutionDetail","value":""}]}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                },
                "example": {"id":"4aa4b4e1-866a-493e-8d33-51f9e47a0843","taskDefinitionId":{"scope":"A1","code":"ZZZ"},"taskDefinitionDisplayName":"Test Definition","state":"foo","ultimateParentTask":{"id":"4aa4b4e1-866a-493e-8d33-51f9e47a0843","taskDefinitionId":{"scope":"A1","code":"ZZZ"},"taskDefinitionDisplayName":"Test Definition","state":"foo"},"correlationIds":["correlation-id"],"terminalState":false,"asAtLastTransition":"2022-01-01T01:02:03.0000000+00:00"}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "[EXPERIMENTAL] ListTasks: List Tasks",
        "operationId": "ListTasks",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Tasks. Defaults to return the latest version of each Task if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here: https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing tasks from a previous call to list tasks. This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfTask"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No Tasks found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "[EXPERIMENTAL] GetTask: Get a Task",
        "operationId": "GetTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Task to retrieve",
            "required": true,
            "schema": {
              "maxLength": 40,
              "minLength": 30,
              "pattern": "^[a-zA-Z0-9\\-]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Task. Defaults to returning the latest version of the Task if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                },
                "example": {"id":"4aa4b4e1-866a-493e-8d33-51f9e47a0843","taskDefinitionId":{"scope":"A1","code":"ZZZ"},"taskDefinitionDisplayName":"Test Definition","state":"foo","ultimateParentTask":{"id":"4aa4b4e1-866a-493e-8d33-51f9e47a0843","taskDefinitionId":{"scope":"A1","code":"ZZZ"},"taskDefinitionDisplayName":"Test Definition","state":"foo"},"correlationIds":["correlation-id"],"terminalState":false,"asAtLastTransition":"2022-01-01T01:02:03.0000000+00:00"}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "[EXPERIMENTAL] UpdateTask: Update a Task",
        "operationId": "UpdateTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Task to act upon",
            "required": true,
            "schema": {
              "maxLength": 40,
              "minLength": 30,
              "pattern": "^[a-zA-Z0-9\\-]+$",
              "type": "string"
            }
          },
          {
            "name": "trigger",
            "in": "query",
            "description": "",
            "schema": {
              "maxLength": 1024,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              },
              "example": {"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee","value":"bob"},{"name":"resolutionDetail","value":""}]}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              },
              "example": {"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee","value":"bob"},{"name":"resolutionDetail","value":""}]}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              },
              "example": {"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee","value":"bob"},{"name":"resolutionDetail","value":""}]}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              },
              "example": {"fields":[{"name":"clientId","value":"zzz123"},{"name":"assignee","value":"bob"},{"name":"resolutionDetail","value":""}]}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                },
                "example": {"id":"4aa4b4e1-866a-493e-8d33-51f9e47a0843","taskDefinitionId":{"scope":"A1","code":"ZZZ"},"taskDefinitionDisplayName":"Test Definition","state":"foo","ultimateParentTask":{"id":"4aa4b4e1-866a-493e-8d33-51f9e47a0843","taskDefinitionId":{"scope":"A1","code":"ZZZ"},"taskDefinitionDisplayName":"Test Definition","state":"foo"},"correlationIds":["correlation-id"],"terminalState":false,"asAtLastTransition":"2022-01-01T01:02:03.0000000+00:00"}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "[EXPERIMENTAL] DeleteTask: Delete a Task",
        "operationId": "DeleteTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier for the Task to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 40,
              "minLength": 30,
              "pattern": "^[a-zA-Z0-9\\-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/workers": {
      "post": {
        "tags": [
          "Workers"
        ],
        "summary": "[EXPERIMENTAL] CreateWorker: Create a new Worker",
        "description": "If the Worker already exists a failure will be returned",
        "operationId": "CreateWorker",
        "requestBody": {
          "description": "Worker to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerRequest"
              },
              "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282"}}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerRequest"
              },
              "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282"}}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerRequest"
              },
              "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282"}}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerRequest"
              },
              "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282"}}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                },
                "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                },
                "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                },
                "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      },
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "[EXPERIMENTAL] ListWorkers: List Workers",
        "operationId": "ListWorkers",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Workers. Defaults to return the latest version of each Worker if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing workers from a previous call to list workers. This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfWorker"
                },
                "example": {"values":[{"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}],"links":[]}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfWorker"
                },
                "example": {"values":[{"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}],"links":[]}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfWorker"
                },
                "example": {"values":[{"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}],"links":[]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/workers/{runId}/$result": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "[EXPERIMENTAL] GetWorkerResult: Get the status of a specific run of a worker with any relevant results",
        "operationId": "GetWorkerResult",
        "parameters": [
          {
            "name": "runId",
            "in": "path",
            "description": "The ID returned when calling Run Worker",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkerResultResponse"
                },
                "example": {"workerStatus":"CompletedNoResults","results":[{"HttpStatusCode":"200"}]}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkerResultResponse"
                },
                "example": {"workerStatus":"CompletedNoResults","results":[{"HttpStatusCode":"200"}]}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkerResultResponse"
                },
                "example": {"workerStatus":"CompletedNoResults","results":[{"HttpStatusCode":"200"}]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/workers/{scope}/{code}": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "[EXPERIMENTAL] GetWorker: Get a Worker",
        "description": "Will return a NotFound failure if the Worker does not exist",
        "operationId": "GetWorker",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the worker",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the worker",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Worker. Defaults to returning the latest version of the Worker if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                },
                "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                },
                "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                },
                "example": {"id":{"scope":"Health","code":"HealthCheckWorker"},"displayName":"ASP.Net Health Check worker","description":"Calls /health to check a service is running","workerConfiguration":{"type":"HealthCheck","url":"http://localhost.lusid.com:8282/health"},"version":{"asAtCreated":"2023-01-01T12:00:00.0000000+00:00","userIdCreated":"UserId123","requestIdCreated":"RequestId123","asAtModified":"2023-01-01T12:00:00.0000000+00:00","userIdModified":"UserId123","requestIdModified":"RequestId123","asAtVersionNumber":1},"parameters":[],"resultFields":[]}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    },
    "/api/workers/{scope}/{code}/$run": {
      "post": {
        "tags": [
          "Workers"
        ],
        "summary": "[EXPERIMENTAL] RunWorker: Run a Worker",
        "operationId": "RunWorker",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the worker",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the worker",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Worker. Defaults to returning the latest version of the Worker if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RunWorkerRequest"
              },
              "example": {"parameters":[{"name":"test-parameter","value":true}]}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunWorkerRequest"
              },
              "example": {"parameters":[{"name":"test-parameter","value":true}]}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RunWorkerRequest"
              },
              "example": {"parameters":[{"name":"test-parameter","value":true}]}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RunWorkerRequest"
              },
              "example": {"parameters":[{"name":"test-parameter","value":true}]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RunWorkerResponse"
                },
                "example": {"runId":0}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunWorkerResponse"
                },
                "example": {"runId":0}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunWorkerResponse"
                },
                "example": {"runId":0}
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [ ]
          }
        ],
        "x-fbn-apistatus": "Experimental"
      }
    }
  },
  "components": {
    "schemas": {
      "ActionDefinition": {
        "required": [
          "actionDetails",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Name of this Action"
          },
          "actionDetails": {
            "$ref": "#/components/schemas/ActionDetails"
          }
        },
        "additionalProperties": false,
        "description": "Defines the Actions for a Task"
      },
      "ActionDefinitionResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Name of this Action",
            "nullable": true
          },
          "actionDetails": {
            "$ref": "#/components/schemas/ActionDetailsResponse"
          }
        },
        "additionalProperties": false,
        "description": "Defines the Actions for a Task in a read-only form"
      },
      "ActionDetails": {
        "required": [
          "type"
        ],
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateChildTasksAction"
          },
          {
            "$ref": "#/components/schemas/RunWorkerAction"
          },
          {
            "$ref": "#/components/schemas/TriggerParentTaskAction"
          }
        ],
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Type name for this Action"
          }
        },
        "additionalProperties": false,
        "description": "Abstracts the kinds of Actions available"
      },
      "ActionDetailsResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateChildTasksActionResponse"
          },
          {
            "$ref": "#/components/schemas/RunWorkerActionResponse"
          },
          {
            "$ref": "#/components/schemas/TriggerParentTaskActionResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type name for this Action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Abstracts the kinds of Actions available in a read-only form"
      },
      "CreateChildTaskConfiguration": {
        "required": [
          "taskDefinitionId"
        ],
        "type": "object",
        "properties": {
          "taskDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "taskDefinitionAsAt": {
            "type": "string",
            "description": "TaskDefinition AsAt timestamp",
            "format": "date-time",
            "nullable": true
          },
          "initialTrigger": {
            "maxLength": 1024,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Initial Trigger for automatic start",
            "nullable": true
          },
          "childTaskFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMapping"
            },
            "description": "Field Mappings",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create Child Task Configuration"
      },
      "CreateChildTasksAction": {
        "required": [
          "childTaskConfigurations",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "CreateChildTasks"
            ],
            "type": "string",
            "description": "Type name for this Action"
          },
          "childTaskConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateChildTaskConfiguration"
            },
            "description": "The Child Task Configurations"
          }
        },
        "additionalProperties": false,
        "description": "Defines a Create Child Tasks Action"
      },
      "CreateChildTasksActionResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "CreateChildTasks"
            ],
            "type": "string",
            "description": "Type name for this Action",
            "nullable": true
          },
          "childTaskConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateChildTaskConfiguration"
            },
            "description": "The Child Task Configurations",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a read-only Create Child Tasks Action"
      },
      "CreateTaskDefinitionRequest": {
        "required": [
          "displayName",
          "id",
          "initialState",
          "states"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "Human readable name"
          },
          "description": {
            "type": "string",
            "description": "Human readable description",
            "nullable": true
          },
          "states": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStateDefinition"
            },
            "description": "The states this Task Definition operates over"
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskFieldDefinition"
            },
            "description": "Defines the fields associated with this Task",
            "nullable": true
          },
          "initialState": {
            "$ref": "#/components/schemas/InitialState"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransitionTriggerDefinition"
            },
            "description": "Triggers",
            "nullable": true
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTransitionDefinition"
            },
            "description": "Transitions",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionDefinition"
            },
            "description": "Actions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains required info to create a new Task Definition"
      },
      "CreateTaskRequest": {
        "required": [
          "taskDefinitionId"
        ],
        "type": "object",
        "properties": {
          "taskDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "correlationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of guid identifiers that allow correlation across the application tier",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskInstanceField"
            },
            "description": "Fields and their initial values - should correspond with the Task Definition field schema",
            "nullable": true
          },
          "stackingKey": {
            "type": "string",
            "description": "The key for the Stack that this Task should be added to",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains required info to create a new Task"
      },
      "CreateWorkerRequest": {
        "required": [
          "displayName",
          "id",
          "workerConfiguration"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "Human readable name"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "Human readable description",
            "nullable": true
          },
          "workerConfiguration": {
            "$ref": "#/components/schemas/WorkerConfiguration"
          }
        },
        "additionalProperties": false,
        "description": "Request to Create a new worker"
      },
      "DeletedEntityResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The Uri related to this Entity",
            "format": "uri",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The EffectiveFrom for this response",
            "format": "date-time",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt for this response",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Fail": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Fail"
            ],
            "type": "string",
            "description": "The type of worker"
          }
        },
        "additionalProperties": false,
        "description": "Configuration for a Worker that always Fails"
      },
      "FailResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Fail"
            ],
            "type": "string",
            "description": "The type of worker",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Readonly configuration for a Worker that always Fails"
      },
      "FieldMapping": {
        "type": "object",
        "properties": {
          "mapFrom": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The field to map from",
            "nullable": true
          },
          "setTo": {
            "description": "The (constant) value to set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a single Field map"
      },
      "GetWorkerResultResponse": {
        "required": [
          "results",
          "workerStatus"
        ],
        "type": "object",
        "properties": {
          "workerStatus": {
            "minLength": 1,
            "type": "string",
            "description": "The final status of the Worker"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": { }
            },
            "description": "Results"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail on the final status",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The RunWorker response"
      },
      "HealthCheck": {
        "required": [
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "HealthCheck"
            ],
            "type": "string",
            "description": "The type of worker"
          },
          "url": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "The URL to check, eg: https://www.google.com/",
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "description": "Configuration for a Worker that performs a GET against a given Url."
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "HealthCheck"
            ],
            "type": "string",
            "description": "The type of worker",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The URL to check, eg: https://www.google.com/",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Readonly configuration for a Worker that performs a GET against a given Url."
      },
      "InitialState": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Initial State of the Task"
          },
          "requiredFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required input Fields for the Initial State",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the Initial State of the Task"
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LuminesceView": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "LuminesceView"
            ],
            "type": "string",
            "description": "The type of worker"
          },
          "name": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "Name of the view in Luminesce"
          }
        },
        "additionalProperties": false,
        "description": "Configuration for a Worker that calls a Luminesce view"
      },
      "LuminesceViewResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "LuminesceView"
            ],
            "type": "string",
            "description": "The type of worker",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the view in Luminesce",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Readonly configuration for a Worker that calls a Luminesce view"
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfTask": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfTaskDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfWorker": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Worker"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Parameter": {
        "required": [
          "name",
          "required",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of this Parameter"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name"
          },
          "displayName": {
            "type": "string",
            "description": "DisplayName",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Required or not"
          },
          "defaultValue": {
            "type": "string",
            "description": "DefaultValue",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a Worker Parameter"
      },
      "ParameterValue": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Name"
          },
          "value": {
            "description": "Value which can be a String, Boolean, Decimal or DateTime (ISO 8601)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a Parameter Value"
      },
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfTask": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultantChildTaskConfiguration": {
        "required": [
          "childTaskFields",
          "taskDefinitionId"
        ],
        "type": "object",
        "properties": {
          "resultMatchingPattern": {
            "$ref": "#/components/schemas/ResultMatchingPattern"
          },
          "taskDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "taskDefinitionAsAt": {
            "type": "string",
            "description": "TaskDefinition AsAt timestamp",
            "format": "date-time",
            "nullable": true
          },
          "initialTrigger": {
            "maxLength": 1024,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Initial Trigger for automatic start",
            "nullable": true
          },
          "childTaskFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMapping"
            },
            "description": "Field Mappings"
          }
        },
        "additionalProperties": false,
        "description": "Child Task Configuration"
      },
      "ResultField": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of this Parameter"
          },
          "displayName": {
            "type": "string",
            "description": "DisplayName",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a Worker Result Field"
      },
      "ResultMatchingPattern": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "Filter string"
          }
        },
        "additionalProperties": false,
        "description": "Standard Finbourne filter to match against Run Worker results"
      },
      "RunWorkerAction": {
        "required": [
          "type",
          "workerId"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "RunWorker"
            ],
            "type": "string",
            "description": "Type name for this Action"
          },
          "workerId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "workerAsAt": {
            "type": "string",
            "description": "Worker AsAt",
            "format": "date-time",
            "nullable": true
          },
          "workerParameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMapping"
            },
            "description": "Parameters for this Worker",
            "nullable": true
          },
          "workerStatusTriggers": {
            "$ref": "#/components/schemas/WorkerStatusTriggers"
          },
          "childTaskConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultantChildTaskConfiguration"
            },
            "description": "Tasks can be generated from run worker results; this is the configuration",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a Run Worker Action"
      },
      "RunWorkerActionResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "RunWorker"
            ],
            "type": "string",
            "description": "Type name for this Action",
            "nullable": true
          },
          "workerId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "workerAsAt": {
            "type": "string",
            "description": "Worker AsAt",
            "format": "date-time",
            "nullable": true
          },
          "workerParameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldMapping"
            },
            "description": "Parameters for this Worker",
            "nullable": true
          },
          "workerStatusTriggers": {
            "$ref": "#/components/schemas/WorkerStatusTriggers"
          },
          "childTaskConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultantChildTaskConfiguration"
            },
            "description": "Tasks can be generated from run worker results; this is the configuration",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a read-only Run Worker Action"
      },
      "RunWorkerRequest": {
        "required": [
          "parameters"
        ],
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterValue"
            },
            "description": "The Parameter and their values."
          }
        },
        "additionalProperties": false,
        "description": "Request to Create a new worker"
      },
      "RunWorkerResponse": {
        "required": [
          "runId"
        ],
        "type": "object",
        "properties": {
          "runId": {
            "type": "integer",
            "description": "Identifies a Worker run",
            "format": "int64"
          },
          "statusDetail": {
            "type": "string",
            "description": "Detail on the final status",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The RunWorker response"
      },
      "Sleep": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Sleep"
            ],
            "type": "string",
            "description": "The type of worker"
          }
        },
        "additionalProperties": false,
        "description": "Configuration for a Worker that Sleeps for a user-defined amount of time"
      },
      "SleepResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Sleep"
            ],
            "type": "string",
            "description": "The type of worker"
          }
        },
        "additionalProperties": false,
        "description": "Configuration for a Worker that Sleeps for a user-defined amount of time"
      },
      "Stack": {
        "type": "object",
        "properties": {
          "memberAddedAsAt": {
            "type": "string",
            "description": "When the Task was added to the Stack",
            "format": "date-time"
          },
          "stackOpenedAsAt": {
            "type": "string",
            "description": "When the Stack was opened",
            "format": "date-time"
          },
          "stackClosedAsAt": {
            "type": "string",
            "description": "When the Stack was closed",
            "format": "date-time",
            "nullable": true
          },
          "stackMembershipType": {
            "type": "string",
            "description": "Whether the task is the Lead task of the Stack or a Member within the Stack",
            "nullable": true
          },
          "stackStatus": {
            "type": "string",
            "description": "Status of the Stack (Open/Closed)",
            "nullable": true
          },
          "leadTaskId": {
            "type": "string",
            "description": "ID of the Lead Task",
            "format": "uuid"
          },
          "leadTaskState": {
            "type": "string",
            "description": "State of the Lead Task",
            "nullable": true
          },
          "tasksInStack": {
            "type": "integer",
            "description": "Number of Tasks in the Stack",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Information pertaining to the Tasks Stack if one is present"
      },
      "Task": {
        "required": [
          "id",
          "state",
          "taskDefinitionDisplayName",
          "taskDefinitionId",
          "taskDefinitionVersion",
          "terminalState",
          "ultimateParentTask"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id for this Task",
            "format": "uuid"
          },
          "taskDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "taskDefinitionVersion": {
            "$ref": "#/components/schemas/TaskDefinitionVersion"
          },
          "taskDefinitionDisplayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the Task Definition used by this Task"
          },
          "state": {
            "minLength": 1,
            "type": "string",
            "description": "Current State"
          },
          "ultimateParentTask": {
            "$ref": "#/components/schemas/TaskSummary"
          },
          "parentTask": {
            "$ref": "#/components/schemas/TaskSummary"
          },
          "childTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSummary"
            },
            "description": "This Task's child tasks",
            "nullable": true
          },
          "correlationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User-provided ID used to link entities and tasks",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/VersionInfo"
          },
          "terminalState": {
            "type": "boolean",
            "description": "True if no onward transitions are possible"
          },
          "asAtLastTransition": {
            "type": "string",
            "description": "Last Transition timestamp",
            "format": "date-time",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskInstanceField"
            },
            "description": "Fields and their latest values - should correspond with the Task Definition field schema",
            "nullable": true
          },
          "stackingKey": {
            "type": "string",
            "description": "The key used to determine which stack to add the Task to",
            "nullable": true
          },
          "stack": {
            "$ref": "#/components/schemas/Stack"
          }
        },
        "additionalProperties": false,
        "description": "Defines a Task created based on a Task Definition"
      },
      "TaskDefinition": {
        "required": [
          "displayName",
          "id",
          "initialState",
          "states"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/VersionInfo"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "Human readable name"
          },
          "description": {
            "type": "string",
            "description": "Human readable description",
            "nullable": true
          },
          "states": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStateDefinition"
            },
            "description": "The states this Task Definition operates over"
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskFieldDefinition"
            },
            "description": "The Fields that this Task Definition operates on",
            "nullable": true
          },
          "initialState": {
            "$ref": "#/components/schemas/InitialState"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransitionTriggerDefinition"
            },
            "description": "The Triggers for State transition",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionDefinitionResponse"
            },
            "description": "The Actions of this Task - executed after a Transition completion",
            "nullable": true
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTransitionDefinition"
            },
            "description": "The Transitions between States",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Task Definition"
      },
      "TaskDefinitionVersion": {
        "type": "object",
        "properties": {
          "asAtModified": {
            "type": "string",
            "description": "The asAt datetime of the Task Definition used by this Task",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The version of the Task Definition used by this Task"
      },
      "TaskFieldDefinition": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The name of this Field"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The value type for the field. Available values are: \"String\", \"Decimal\", \"DateTime\", \"Boolean\")"
          }
        },
        "additionalProperties": false,
        "description": "Defines a Task Definition Field"
      },
      "TaskInstanceField": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The name of this Field"
          },
          "value": {
            "description": "The value of this Field",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a Field on a Task"
      },
      "TaskStateDefinition": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Name of this State"
          }
        },
        "additionalProperties": false,
        "description": "A Task Definition/Task has a given set of States"
      },
      "TaskSummary": {
        "required": [
          "id",
          "state",
          "taskDefinitionDisplayName",
          "taskDefinitionId",
          "taskDefinitionVersion"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id for this Task",
            "format": "uuid"
          },
          "taskDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "taskDefinitionVersion": {
            "$ref": "#/components/schemas/TaskDefinitionVersion"
          },
          "taskDefinitionDisplayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the Task Definition used by this Task"
          },
          "state": {
            "minLength": 1,
            "type": "string",
            "description": "Current State"
          }
        },
        "additionalProperties": false,
        "description": "Summary of a Task created based on a Task Definition"
      },
      "TaskTransitionDefinition": {
        "required": [
          "fromState",
          "toState",
          "trigger"
        ],
        "type": "object",
        "properties": {
          "fromState": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The State this Transition if coming From"
          },
          "toState": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The State this Transition is going To"
          },
          "trigger": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Trigger for this Transition"
          },
          "guard": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The Guard for this Transition, if any",
            "nullable": true
          },
          "action": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The Action to invoke on successful Transition",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a State change"
      },
      "TransitionTriggerDefinition": {
        "required": [
          "name",
          "trigger"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The key/Name of this Trigger"
          },
          "trigger": {
            "$ref": "#/components/schemas/TriggerSchema"
          }
        },
        "additionalProperties": false,
        "description": "State changes happen in response to Triggers"
      },
      "TriggerParentTaskAction": {
        "required": [
          "trigger",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "TriggerParentTask"
            ],
            "type": "string",
            "description": "Type name for this Action"
          },
          "trigger": {
            "maxLength": 1024,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Trigger on parent task to be invoked"
          }
        },
        "additionalProperties": false,
        "description": "Defines a Trigger Parent Task Action"
      },
      "TriggerParentTaskActionResponse": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "TriggerParentTask"
            ],
            "type": "string",
            "description": "Type name for this Action",
            "nullable": true
          },
          "trigger": {
            "type": "string",
            "description": "Trigger on parent task to be invoked",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a read-only Trigger Parent Task Action"
      },
      "TriggerSchema": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of Trigger; available value(s): External"
          }
        },
        "additionalProperties": false,
        "description": "Triggers can operate in response to different stimuli"
      },
      "UpdateTaskDefinitionRequest": {
        "required": [
          "displayName",
          "initialState",
          "states"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "Human readable name"
          },
          "description": {
            "type": "string",
            "description": "Human readable description",
            "nullable": true
          },
          "states": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStateDefinition"
            },
            "description": "The states this Task Definition operates over"
          },
          "fieldSchema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskFieldDefinition"
            },
            "description": "Defines the fields associated with this Task",
            "nullable": true
          },
          "initialState": {
            "$ref": "#/components/schemas/InitialState"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransitionTriggerDefinition"
            },
            "description": "Triggers",
            "nullable": true
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTransitionDefinition"
            },
            "description": "Transitions",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionDefinition"
            },
            "description": "Actions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains required info to update a Task Definition"
      },
      "UpdateTaskRequest": {
        "type": "object",
        "properties": {
          "correlationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of guid identifiers that allow correlation across the application tier",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskInstanceField"
            },
            "description": "Defines the fields associated with the update",
            "nullable": true
          },
          "stackingKey": {
            "type": "string",
            "description": "The key for the Stack that this Task should be added to",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to update a Task"
      },
      "VersionInfo": {
        "type": "object",
        "properties": {
          "asAtCreated": {
            "type": "string",
            "description": "The asAt datetime at which this entity was first created.",
            "format": "date-time",
            "nullable": true
          },
          "userIdCreated": {
            "type": "string",
            "description": "The unique id of the user who created this entity.",
            "nullable": true
          },
          "requestIdCreated": {
            "type": "string",
            "description": "The request id of the request that created this entity.",
            "nullable": true
          },
          "asAtModified": {
            "type": "string",
            "description": "The asAt datetime at which this entity was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "userIdModified": {
            "type": "string",
            "description": "The unique id of the user who last updated this entity.",
            "nullable": true
          },
          "requestIdModified": {
            "type": "string",
            "description": "The request id of the request that last updated this entity.",
            "nullable": true
          },
          "asAtVersionNumber": {
            "type": "integer",
            "description": "The integer version number for this entity (the entity was created at version 1).",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The version metadata."
      },
      "Worker": {
        "required": [
          "displayName",
          "id",
          "workerConfiguration"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "Human readable name"
          },
          "description": {
            "type": "string",
            "description": "Human readable description",
            "nullable": true
          },
          "workerConfiguration": {
            "$ref": "#/components/schemas/WorkerConfigurationResponse"
          },
          "version": {
            "$ref": "#/components/schemas/VersionInfo"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "description": "The Parameters this Worker accepts or requires.",
            "nullable": true
          },
          "resultFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultField"
            },
            "description": "The Fields that the Worker results will come back with.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the Worker"
      },
      "WorkerConfiguration": {
        "required": [
          "type"
        ],
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Fail"
          },
          {
            "$ref": "#/components/schemas/HealthCheck"
          },
          {
            "$ref": "#/components/schemas/LuminesceView"
          },
          {
            "$ref": "#/components/schemas/Sleep"
          }
        ],
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of worker"
          }
        },
        "additionalProperties": false,
        "description": "Information about how the worker should be executed"
      },
      "WorkerConfigurationResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/FailResponse"
          },
          {
            "$ref": "#/components/schemas/HealthCheckResponse"
          },
          {
            "$ref": "#/components/schemas/LuminesceViewResponse"
          },
          {
            "$ref": "#/components/schemas/SleepResponse"
          }
        ],
        "additionalProperties": false,
        "description": "Readonly information about how the worker should be executed"
      },
      "WorkerStatusTriggers": {
        "type": "object",
        "properties": {
          "started": {
            "type": "string",
            "description": "Trigger to invoke when the Worker has Started",
            "nullable": true
          },
          "completedWithResults": {
            "type": "string",
            "description": "Trigger to invoke when the Worker has Completed (with results)",
            "nullable": true
          },
          "completedNoResults": {
            "type": "string",
            "description": "Trigger to invoke when the Worker has Completed (no results)",
            "nullable": true
          },
          "failedToStart": {
            "type": "string",
            "description": "Trigger to invoke when the Worker has Failed to Start",
            "nullable": true
          },
          "failedToComplete": {
            "type": "string",
            "description": "Trigger to invoke when the Worker has Failed to Complete",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines triggers that will be invoked per Worker outcome"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://lusid.okta.com/oauth2/default/v1/authorize",
            "scopes": { }
          }
        }
      }
    }
  },
  "security": [
    { }
  ],
  "tags": [
    {
      "name": "Task Definitions",
      "description": "Workflow endpoint for managing Task Definitions"
    },
    {
      "name": "Tasks",
      "description": "Workflow endpoint for managing Tasks"
    },
    {
      "name": "Workers",
      "description": "Workflow endpoint for managing and running Workers"
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Task Definitions",
      "Tasks",
      "Workers"
    ]
  }
}