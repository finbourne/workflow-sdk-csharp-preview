/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines a read-only Trigger Parent Task Action
    /// </summary>
    [DataContract(Name = "TriggerParentTaskActionResponse")]
    public partial class TriggerParentTaskActionResponse : IEquatable<TriggerParentTaskActionResponse>, IValidatableObject
    {
        /// <summary>
        /// Type name for this Action
        /// </summary>
        /// <value>Type name for this Action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum TriggerParentTask for value: TriggerParentTask
            /// </summary>
            [EnumMember(Value = "TriggerParentTask")]
            TriggerParentTask = 1

        }


        /// <summary>
        /// Type name for this Action
        /// </summary>
        /// <value>Type name for this Action</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerParentTaskActionResponse" /> class.
        /// </summary>
        /// <param name="type">Type name for this Action.</param>
        /// <param name="trigger">Trigger on parent task to be invoked.</param>
        public TriggerParentTaskActionResponse(TypeEnum? type = default(TypeEnum?), string trigger = default(string))
        {
            this.Type = type;
            this.Trigger = trigger;
        }

        /// <summary>
        /// Trigger on parent task to be invoked
        /// </summary>
        /// <value>Trigger on parent task to be invoked</value>
        [DataMember(Name = "trigger", EmitDefaultValue = true)]
        public string Trigger { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TriggerParentTaskActionResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TriggerParentTaskActionResponse);
        }

        /// <summary>
        /// Returns true if TriggerParentTaskActionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TriggerParentTaskActionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TriggerParentTaskActionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Trigger != null)
                {
                    hashCode = (hashCode * 59) + this.Trigger.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
