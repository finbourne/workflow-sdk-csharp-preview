/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// The Action Log Origin contains information about how the Action was created
    /// </summary>
    [DataContract(Name = "ActionLogOrigin")]
    public partial class ActionLogOrigin : IEquatable<ActionLogOrigin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLogOrigin" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionLogOrigin() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLogOrigin" /> class.
        /// </summary>
        /// <param name="taskId">The Id of the Task that created this Action.</param>
        /// <param name="requestId">The request Id of the request that caused this Action to be triggered.  This could be the original request that caused a sequence of Actions that resulted in this Action (required).</param>
        public ActionLogOrigin(Guid? taskId = default(Guid?), string requestId = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for ActionLogOrigin and cannot be null");
            }
            this.RequestId = requestId;
            this.TaskId = taskId;
        }

        /// <summary>
        /// The Id of the Task that created this Action
        /// </summary>
        /// <value>The Id of the Task that created this Action</value>
        [DataMember(Name = "taskId", EmitDefaultValue = true)]
        public Guid? TaskId { get; set; }

        /// <summary>
        /// The request Id of the request that caused this Action to be triggered.  This could be the original request that caused a sequence of Actions that resulted in this Action
        /// </summary>
        /// <value>The request Id of the request that caused this Action to be triggered.  This could be the original request that caused a sequence of Actions that resulted in this Action</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionLogOrigin {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionLogOrigin);
        }

        /// <summary>
        /// Returns true if ActionLogOrigin instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionLogOrigin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionLogOrigin input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskId != null)
                {
                    hashCode = (hashCode * 59) + this.TaskId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequestId (string) minLength
            if (this.RequestId != null && this.RequestId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be greater than 1.", new [] { "RequestId" });
            }

            yield break;
        }
    }
}
