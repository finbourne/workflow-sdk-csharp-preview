/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Information pertaining to the Tasks Stack if one is present
    /// </summary>
    [DataContract(Name = "Stack")]
    public partial class Stack : IEquatable<Stack>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stack" /> class.
        /// </summary>
        /// <param name="memberAddedAsAt">When the Task was added to the Stack.</param>
        /// <param name="stackOpenedAsAt">When the Stack was opened.</param>
        /// <param name="stackClosedAsAt">When the Stack was closed.</param>
        /// <param name="stackMembershipType">Whether the task is the Lead task of the Stack or a Member within the Stack.</param>
        /// <param name="stackStatus">Status of the Stack (Open/Closed).</param>
        /// <param name="leadTaskId">ID of the Lead Task.</param>
        /// <param name="leadTaskState">State of the Lead Task.</param>
        /// <param name="tasksInStack">Number of Tasks in the Stack.</param>
        public Stack(DateTimeOffset memberAddedAsAt = default(DateTimeOffset), DateTimeOffset stackOpenedAsAt = default(DateTimeOffset), DateTimeOffset? stackClosedAsAt = default(DateTimeOffset?), string stackMembershipType = default(string), string stackStatus = default(string), Guid leadTaskId = default(Guid), string leadTaskState = default(string), int tasksInStack = default(int))
        {
            this.MemberAddedAsAt = memberAddedAsAt;
            this.StackOpenedAsAt = stackOpenedAsAt;
            this.StackClosedAsAt = stackClosedAsAt;
            this.StackMembershipType = stackMembershipType;
            this.StackStatus = stackStatus;
            this.LeadTaskId = leadTaskId;
            this.LeadTaskState = leadTaskState;
            this.TasksInStack = tasksInStack;
        }

        /// <summary>
        /// When the Task was added to the Stack
        /// </summary>
        /// <value>When the Task was added to the Stack</value>
        [DataMember(Name = "memberAddedAsAt", EmitDefaultValue = false)]
        public DateTimeOffset MemberAddedAsAt { get; set; }

        /// <summary>
        /// When the Stack was opened
        /// </summary>
        /// <value>When the Stack was opened</value>
        [DataMember(Name = "stackOpenedAsAt", EmitDefaultValue = false)]
        public DateTimeOffset StackOpenedAsAt { get; set; }

        /// <summary>
        /// When the Stack was closed
        /// </summary>
        /// <value>When the Stack was closed</value>
        [DataMember(Name = "stackClosedAsAt", EmitDefaultValue = true)]
        public DateTimeOffset? StackClosedAsAt { get; set; }

        /// <summary>
        /// Whether the task is the Lead task of the Stack or a Member within the Stack
        /// </summary>
        /// <value>Whether the task is the Lead task of the Stack or a Member within the Stack</value>
        [DataMember(Name = "stackMembershipType", EmitDefaultValue = true)]
        public string StackMembershipType { get; set; }

        /// <summary>
        /// Status of the Stack (Open/Closed)
        /// </summary>
        /// <value>Status of the Stack (Open/Closed)</value>
        [DataMember(Name = "stackStatus", EmitDefaultValue = true)]
        public string StackStatus { get; set; }

        /// <summary>
        /// ID of the Lead Task
        /// </summary>
        /// <value>ID of the Lead Task</value>
        [DataMember(Name = "leadTaskId", EmitDefaultValue = false)]
        public Guid LeadTaskId { get; set; }

        /// <summary>
        /// State of the Lead Task
        /// </summary>
        /// <value>State of the Lead Task</value>
        [DataMember(Name = "leadTaskState", EmitDefaultValue = true)]
        public string LeadTaskState { get; set; }

        /// <summary>
        /// Number of Tasks in the Stack
        /// </summary>
        /// <value>Number of Tasks in the Stack</value>
        [DataMember(Name = "tasksInStack", EmitDefaultValue = false)]
        public int TasksInStack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Stack {\n");
            sb.Append("  MemberAddedAsAt: ").Append(MemberAddedAsAt).Append("\n");
            sb.Append("  StackOpenedAsAt: ").Append(StackOpenedAsAt).Append("\n");
            sb.Append("  StackClosedAsAt: ").Append(StackClosedAsAt).Append("\n");
            sb.Append("  StackMembershipType: ").Append(StackMembershipType).Append("\n");
            sb.Append("  StackStatus: ").Append(StackStatus).Append("\n");
            sb.Append("  LeadTaskId: ").Append(LeadTaskId).Append("\n");
            sb.Append("  LeadTaskState: ").Append(LeadTaskState).Append("\n");
            sb.Append("  TasksInStack: ").Append(TasksInStack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Stack);
        }

        /// <summary>
        /// Returns true if Stack instances are equal
        /// </summary>
        /// <param name="input">Instance of Stack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stack input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MemberAddedAsAt == input.MemberAddedAsAt ||
                    (this.MemberAddedAsAt != null &&
                    this.MemberAddedAsAt.Equals(input.MemberAddedAsAt))
                ) && 
                (
                    this.StackOpenedAsAt == input.StackOpenedAsAt ||
                    (this.StackOpenedAsAt != null &&
                    this.StackOpenedAsAt.Equals(input.StackOpenedAsAt))
                ) && 
                (
                    this.StackClosedAsAt == input.StackClosedAsAt ||
                    (this.StackClosedAsAt != null &&
                    this.StackClosedAsAt.Equals(input.StackClosedAsAt))
                ) && 
                (
                    this.StackMembershipType == input.StackMembershipType ||
                    (this.StackMembershipType != null &&
                    this.StackMembershipType.Equals(input.StackMembershipType))
                ) && 
                (
                    this.StackStatus == input.StackStatus ||
                    (this.StackStatus != null &&
                    this.StackStatus.Equals(input.StackStatus))
                ) && 
                (
                    this.LeadTaskId == input.LeadTaskId ||
                    (this.LeadTaskId != null &&
                    this.LeadTaskId.Equals(input.LeadTaskId))
                ) && 
                (
                    this.LeadTaskState == input.LeadTaskState ||
                    (this.LeadTaskState != null &&
                    this.LeadTaskState.Equals(input.LeadTaskState))
                ) && 
                (
                    this.TasksInStack == input.TasksInStack ||
                    this.TasksInStack.Equals(input.TasksInStack)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MemberAddedAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.MemberAddedAsAt.GetHashCode();
                }
                if (this.StackOpenedAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.StackOpenedAsAt.GetHashCode();
                }
                if (this.StackClosedAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.StackClosedAsAt.GetHashCode();
                }
                if (this.StackMembershipType != null)
                {
                    hashCode = (hashCode * 59) + this.StackMembershipType.GetHashCode();
                }
                if (this.StackStatus != null)
                {
                    hashCode = (hashCode * 59) + this.StackStatus.GetHashCode();
                }
                if (this.LeadTaskId != null)
                {
                    hashCode = (hashCode * 59) + this.LeadTaskId.GetHashCode();
                }
                if (this.LeadTaskState != null)
                {
                    hashCode = (hashCode * 59) + this.LeadTaskState.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TasksInStack.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
