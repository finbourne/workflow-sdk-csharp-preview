/*
 * FINBOURNE Workflow API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.159
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines a State change
    /// </summary>
    [DataContract(Name = "Transition")]
    public partial class Transition : IEquatable<Transition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transition" /> class.
        /// </summary>
        /// <param name="from">The State this Transition if coming From.</param>
        /// <param name="to">The State this Transition is going To.</param>
        /// <param name="trigger">The Trigger for this Transition.</param>
        /// <param name="guard">The Guard for this Transition, if any.</param>
        /// <param name="output">The Output action to invoke on successful Transition.</param>
        public Transition(string from = default(string), string to = default(string), string trigger = default(string), string guard = default(string), string output = default(string))
        {
            this.From = from;
            this.To = to;
            this.Trigger = trigger;
            this.Guard = guard;
            this.Output = output;
        }

        /// <summary>
        /// The State this Transition if coming From
        /// </summary>
        /// <value>The State this Transition if coming From</value>
        [DataMember(Name = "from", EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The State this Transition is going To
        /// </summary>
        /// <value>The State this Transition is going To</value>
        [DataMember(Name = "to", EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// The Trigger for this Transition
        /// </summary>
        /// <value>The Trigger for this Transition</value>
        [DataMember(Name = "trigger", EmitDefaultValue = true)]
        public string Trigger { get; set; }

        /// <summary>
        /// The Guard for this Transition, if any
        /// </summary>
        /// <value>The Guard for this Transition, if any</value>
        [DataMember(Name = "guard", EmitDefaultValue = true)]
        public string Guard { get; set; }

        /// <summary>
        /// The Output action to invoke on successful Transition
        /// </summary>
        /// <value>The Output action to invoke on successful Transition</value>
        [DataMember(Name = "output", EmitDefaultValue = true)]
        public string Output { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transition {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Guard: ").Append(Guard).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transition);
        }

        /// <summary>
        /// Returns true if Transition instances are equal
        /// </summary>
        /// <param name="input">Instance of Transition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Guard == input.Guard ||
                    (this.Guard != null &&
                    this.Guard.Equals(input.Guard))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Guard != null)
                    hashCode = hashCode * 59 + this.Guard.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                return hashCode;
            }
        }

    }
}
