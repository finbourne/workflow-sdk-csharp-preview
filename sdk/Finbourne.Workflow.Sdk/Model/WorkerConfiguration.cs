/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Information about how the worker should be executed
    /// </summary>
    [JsonConverter(typeof(WorkerConfigurationJsonConverter))]
    [DataContract(Name = "WorkerConfiguration")]
    public partial class WorkerConfiguration : AbstractOpenAPISchema, IEquatable<WorkerConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerConfiguration" /> class
        /// with the <see cref="Fail" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Fail.</param>
        public WorkerConfiguration(Fail actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerConfiguration" /> class
        /// with the <see cref="HealthCheck" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of HealthCheck.</param>
        public WorkerConfiguration(HealthCheck actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerConfiguration" /> class
        /// with the <see cref="LuminesceView" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LuminesceView.</param>
        public WorkerConfiguration(LuminesceView actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerConfiguration" /> class
        /// with the <see cref="SchedulerJob" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SchedulerJob.</param>
        public WorkerConfiguration(SchedulerJob actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerConfiguration" /> class
        /// with the <see cref="Sleep" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Sleep.</param>
        public WorkerConfiguration(Sleep actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(Fail))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(HealthCheck))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LuminesceView))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SchedulerJob))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(Sleep))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: Fail, HealthCheck, LuminesceView, SchedulerJob, Sleep");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `Fail`. If the actual instance is not `Fail`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Fail</returns>
        public Fail GetFail()
        {
            return (Fail)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `HealthCheck`. If the actual instance is not `HealthCheck`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of HealthCheck</returns>
        public HealthCheck GetHealthCheck()
        {
            return (HealthCheck)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LuminesceView`. If the actual instance is not `LuminesceView`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LuminesceView</returns>
        public LuminesceView GetLuminesceView()
        {
            return (LuminesceView)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SchedulerJob`. If the actual instance is not `SchedulerJob`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SchedulerJob</returns>
        public SchedulerJob GetSchedulerJob()
        {
            return (SchedulerJob)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Sleep`. If the actual instance is not `Sleep`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Sleep</returns>
        public Sleep GetSleep()
        {
            return (Sleep)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerConfiguration {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, WorkerConfiguration.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of WorkerConfiguration
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of WorkerConfiguration</returns>
        public static WorkerConfiguration FromJson(string jsonString)
        {
            WorkerConfiguration newWorkerConfiguration = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newWorkerConfiguration;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Fail).GetProperty("AdditionalProperties") == null)
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<Fail>(jsonString, WorkerConfiguration.SerializerSettings));
                }
                else
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<Fail>(jsonString, WorkerConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Fail");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Fail: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(HealthCheck).GetProperty("AdditionalProperties") == null)
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<HealthCheck>(jsonString, WorkerConfiguration.SerializerSettings));
                }
                else
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<HealthCheck>(jsonString, WorkerConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("HealthCheck");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into HealthCheck: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LuminesceView).GetProperty("AdditionalProperties") == null)
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<LuminesceView>(jsonString, WorkerConfiguration.SerializerSettings));
                }
                else
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<LuminesceView>(jsonString, WorkerConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LuminesceView");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LuminesceView: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SchedulerJob).GetProperty("AdditionalProperties") == null)
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<SchedulerJob>(jsonString, WorkerConfiguration.SerializerSettings));
                }
                else
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<SchedulerJob>(jsonString, WorkerConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SchedulerJob");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SchedulerJob: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(Sleep).GetProperty("AdditionalProperties") == null)
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<Sleep>(jsonString, WorkerConfiguration.SerializerSettings));
                }
                else
                {
                    newWorkerConfiguration = new WorkerConfiguration(JsonConvert.DeserializeObject<Sleep>(jsonString, WorkerConfiguration.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("Sleep");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Sleep: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newWorkerConfiguration;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerConfiguration);
        }

        /// <summary>
        /// Returns true if WorkerConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerConfiguration input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for WorkerConfiguration
    /// </summary>
    public class WorkerConfigurationJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(WorkerConfiguration).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return WorkerConfiguration.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
