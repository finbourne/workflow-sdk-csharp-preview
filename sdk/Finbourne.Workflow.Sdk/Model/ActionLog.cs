/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// An Action Log contains the processing history of an Action
    /// </summary>
    [DataContract(Name = "ActionLog")]
    public partial class ActionLog : IEquatable<ActionLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLog" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the Action (required).</param>
        /// <param name="origin">origin (required).</param>
        /// <param name="actionType">The type of the Action (required).</param>
        /// <param name="runAsUserId">The ID of the user that the Action was performed by.  If not specified, the actions were performed by the \&quot;current user\&quot;..</param>
        /// <param name="loggedItems">The logged items for this Action (required).</param>
        public ActionLog(Guid id = default(Guid), ActionLogOrigin origin = default(ActionLogOrigin), string actionType = default(string), string runAsUserId = default(string), List<ActionLogItem> loggedItems = default(List<ActionLogItem>))
        {
            this.Id = id;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for ActionLog and cannot be null");
            }
            this.Origin = origin;
            // to ensure "actionType" is required (not null)
            if (actionType == null)
            {
                throw new ArgumentNullException("actionType is a required property for ActionLog and cannot be null");
            }
            this.ActionType = actionType;
            // to ensure "loggedItems" is required (not null)
            if (loggedItems == null)
            {
                throw new ArgumentNullException("loggedItems is a required property for ActionLog and cannot be null");
            }
            this.LoggedItems = loggedItems;
            this.RunAsUserId = runAsUserId;
        }

        /// <summary>
        /// Unique identifier of the Action
        /// </summary>
        /// <value>Unique identifier of the Action</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public ActionLogOrigin Origin { get; set; }

        /// <summary>
        /// The type of the Action
        /// </summary>
        /// <value>The type of the Action</value>
        [DataMember(Name = "actionType", IsRequired = true, EmitDefaultValue = true)]
        public string ActionType { get; set; }

        /// <summary>
        /// The ID of the user that the Action was performed by.  If not specified, the actions were performed by the \&quot;current user\&quot;.
        /// </summary>
        /// <value>The ID of the user that the Action was performed by.  If not specified, the actions were performed by the \&quot;current user\&quot;.</value>
        [DataMember(Name = "runAsUserId", EmitDefaultValue = true)]
        public string RunAsUserId { get; set; }

        /// <summary>
        /// The logged items for this Action
        /// </summary>
        /// <value>The logged items for this Action</value>
        [DataMember(Name = "loggedItems", IsRequired = true, EmitDefaultValue = true)]
        public List<ActionLogItem> LoggedItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  RunAsUserId: ").Append(RunAsUserId).Append("\n");
            sb.Append("  LoggedItems: ").Append(LoggedItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionLog);
        }

        /// <summary>
        /// Returns true if ActionLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.RunAsUserId == input.RunAsUserId ||
                    (this.RunAsUserId != null &&
                    this.RunAsUserId.Equals(input.RunAsUserId))
                ) && 
                (
                    this.LoggedItems == input.LoggedItems ||
                    this.LoggedItems != null &&
                    input.LoggedItems != null &&
                    this.LoggedItems.SequenceEqual(input.LoggedItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.ActionType != null)
                {
                    hashCode = (hashCode * 59) + this.ActionType.GetHashCode();
                }
                if (this.RunAsUserId != null)
                {
                    hashCode = (hashCode * 59) + this.RunAsUserId.GetHashCode();
                }
                if (this.LoggedItems != null)
                {
                    hashCode = (hashCode * 59) + this.LoggedItems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (Guid) pattern
            Regex regexId = new Regex(@"^[a-zA-Z0-9\-]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // ActionType (string) minLength
            if (this.ActionType != null && this.ActionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActionType, length must be greater than 1.", new [] { "ActionType" });
            }

            // RunAsUserId (string) maxLength
            if (this.RunAsUserId != null && this.RunAsUserId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunAsUserId, length must be less than 1024.", new [] { "RunAsUserId" });
            }

            // RunAsUserId (string) pattern
            Regex regexRunAsUserId = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexRunAsUserId.Match(this.RunAsUserId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunAsUserId, must match a pattern of " + regexRunAsUserId, new [] { "RunAsUserId" });
            }

            yield break;
        }
    }
}
