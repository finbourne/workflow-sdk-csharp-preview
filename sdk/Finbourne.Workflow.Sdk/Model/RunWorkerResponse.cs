/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// The RunWorker response
    /// </summary>
    [DataContract(Name = "RunWorkerResponse")]
    public partial class RunWorkerResponse : IEquatable<RunWorkerResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunWorkerResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RunWorkerResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunWorkerResponse" /> class.
        /// </summary>
        /// <param name="runId">Identifies a Worker run (required).</param>
        /// <param name="statusDetail">Detail on the final status.</param>
        public RunWorkerResponse(Guid runId = default(Guid), string statusDetail = default(string))
        {
            this.RunId = runId;
            this.StatusDetail = statusDetail;
        }

        /// <summary>
        /// Identifies a Worker run
        /// </summary>
        /// <value>Identifies a Worker run</value>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public Guid RunId { get; set; }

        /// <summary>
        /// Detail on the final status
        /// </summary>
        /// <value>Detail on the final status</value>
        [DataMember(Name = "statusDetail", EmitDefaultValue = true)]
        public string StatusDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunWorkerResponse {\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  StatusDetail: ").Append(StatusDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunWorkerResponse);
        }

        /// <summary>
        /// Returns true if RunWorkerResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RunWorkerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunWorkerResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.StatusDetail == input.StatusDetail ||
                    (this.StatusDetail != null &&
                    this.StatusDetail.Equals(input.StatusDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.StatusDetail != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDetail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
