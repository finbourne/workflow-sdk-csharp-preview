/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Child Task Configuration
    /// </summary>
    [DataContract(Name = "ResultantChildTaskConfiguration")]
    public partial class ResultantChildTaskConfiguration : IEquatable<ResultantChildTaskConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultantChildTaskConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResultantChildTaskConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultantChildTaskConfiguration" /> class.
        /// </summary>
        /// <param name="resultMatchingPattern">resultMatchingPattern.</param>
        /// <param name="taskDefinitionId">taskDefinitionId (required).</param>
        /// <param name="taskDefinitionAsAt">TaskDefinition AsAt timestamp.</param>
        /// <param name="initialTrigger">The Initial Trigger for automatic start.</param>
        /// <param name="childTaskFields">Field Mappings (required).</param>
        /// <param name="mapStackingKeyFrom">The field to be mapped as the ChildTasks Stacking Key.</param>
        public ResultantChildTaskConfiguration(ResultMatchingPattern resultMatchingPattern = default(ResultMatchingPattern), ResourceId taskDefinitionId = default(ResourceId), DateTimeOffset? taskDefinitionAsAt = default(DateTimeOffset?), string initialTrigger = default(string), Dictionary<string, FieldMapping> childTaskFields = default(Dictionary<string, FieldMapping>), string mapStackingKeyFrom = default(string))
        {
            // to ensure "taskDefinitionId" is required (not null)
            if (taskDefinitionId == null)
            {
                throw new ArgumentNullException("taskDefinitionId is a required property for ResultantChildTaskConfiguration and cannot be null");
            }
            this.TaskDefinitionId = taskDefinitionId;
            // to ensure "childTaskFields" is required (not null)
            if (childTaskFields == null)
            {
                throw new ArgumentNullException("childTaskFields is a required property for ResultantChildTaskConfiguration and cannot be null");
            }
            this.ChildTaskFields = childTaskFields;
            this.ResultMatchingPattern = resultMatchingPattern;
            this.TaskDefinitionAsAt = taskDefinitionAsAt;
            this.InitialTrigger = initialTrigger;
            this.MapStackingKeyFrom = mapStackingKeyFrom;
        }

        /// <summary>
        /// Gets or Sets ResultMatchingPattern
        /// </summary>
        [DataMember(Name = "resultMatchingPattern", EmitDefaultValue = false)]
        public ResultMatchingPattern ResultMatchingPattern { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinitionId
        /// </summary>
        [DataMember(Name = "taskDefinitionId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId TaskDefinitionId { get; set; }

        /// <summary>
        /// TaskDefinition AsAt timestamp
        /// </summary>
        /// <value>TaskDefinition AsAt timestamp</value>
        [DataMember(Name = "taskDefinitionAsAt", EmitDefaultValue = true)]
        public DateTimeOffset? TaskDefinitionAsAt { get; set; }

        /// <summary>
        /// The Initial Trigger for automatic start
        /// </summary>
        /// <value>The Initial Trigger for automatic start</value>
        [DataMember(Name = "initialTrigger", EmitDefaultValue = true)]
        public string InitialTrigger { get; set; }

        /// <summary>
        /// Field Mappings
        /// </summary>
        /// <value>Field Mappings</value>
        [DataMember(Name = "childTaskFields", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, FieldMapping> ChildTaskFields { get; set; }

        /// <summary>
        /// The field to be mapped as the ChildTasks Stacking Key
        /// </summary>
        /// <value>The field to be mapped as the ChildTasks Stacking Key</value>
        [DataMember(Name = "mapStackingKeyFrom", EmitDefaultValue = true)]
        public string MapStackingKeyFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResultantChildTaskConfiguration {\n");
            sb.Append("  ResultMatchingPattern: ").Append(ResultMatchingPattern).Append("\n");
            sb.Append("  TaskDefinitionId: ").Append(TaskDefinitionId).Append("\n");
            sb.Append("  TaskDefinitionAsAt: ").Append(TaskDefinitionAsAt).Append("\n");
            sb.Append("  InitialTrigger: ").Append(InitialTrigger).Append("\n");
            sb.Append("  ChildTaskFields: ").Append(ChildTaskFields).Append("\n");
            sb.Append("  MapStackingKeyFrom: ").Append(MapStackingKeyFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultantChildTaskConfiguration);
        }

        /// <summary>
        /// Returns true if ResultantChildTaskConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultantChildTaskConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultantChildTaskConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ResultMatchingPattern == input.ResultMatchingPattern ||
                    (this.ResultMatchingPattern != null &&
                    this.ResultMatchingPattern.Equals(input.ResultMatchingPattern))
                ) && 
                (
                    this.TaskDefinitionId == input.TaskDefinitionId ||
                    (this.TaskDefinitionId != null &&
                    this.TaskDefinitionId.Equals(input.TaskDefinitionId))
                ) && 
                (
                    this.TaskDefinitionAsAt == input.TaskDefinitionAsAt ||
                    (this.TaskDefinitionAsAt != null &&
                    this.TaskDefinitionAsAt.Equals(input.TaskDefinitionAsAt))
                ) && 
                (
                    this.InitialTrigger == input.InitialTrigger ||
                    (this.InitialTrigger != null &&
                    this.InitialTrigger.Equals(input.InitialTrigger))
                ) && 
                (
                    this.ChildTaskFields == input.ChildTaskFields ||
                    this.ChildTaskFields != null &&
                    input.ChildTaskFields != null &&
                    this.ChildTaskFields.SequenceEqual(input.ChildTaskFields)
                ) && 
                (
                    this.MapStackingKeyFrom == input.MapStackingKeyFrom ||
                    (this.MapStackingKeyFrom != null &&
                    this.MapStackingKeyFrom.Equals(input.MapStackingKeyFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultMatchingPattern != null)
                {
                    hashCode = (hashCode * 59) + this.ResultMatchingPattern.GetHashCode();
                }
                if (this.TaskDefinitionId != null)
                {
                    hashCode = (hashCode * 59) + this.TaskDefinitionId.GetHashCode();
                }
                if (this.TaskDefinitionAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.TaskDefinitionAsAt.GetHashCode();
                }
                if (this.InitialTrigger != null)
                {
                    hashCode = (hashCode * 59) + this.InitialTrigger.GetHashCode();
                }
                if (this.ChildTaskFields != null)
                {
                    hashCode = (hashCode * 59) + this.ChildTaskFields.GetHashCode();
                }
                if (this.MapStackingKeyFrom != null)
                {
                    hashCode = (hashCode * 59) + this.MapStackingKeyFrom.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InitialTrigger (string) maxLength
            if (this.InitialTrigger != null && this.InitialTrigger.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InitialTrigger, length must be less than 1024.", new [] { "InitialTrigger" });
            }

            // InitialTrigger (string) pattern
            Regex regexInitialTrigger = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexInitialTrigger.Match(this.InitialTrigger).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InitialTrigger, must match a pattern of " + regexInitialTrigger, new [] { "InitialTrigger" });
            }

            yield break;
        }
    }
}
