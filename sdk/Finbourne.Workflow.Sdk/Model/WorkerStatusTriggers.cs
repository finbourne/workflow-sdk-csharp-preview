/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines triggers that will be invoked per Worker outcome
    /// </summary>
    [DataContract(Name = "WorkerStatusTriggers")]
    public partial class WorkerStatusTriggers : IEquatable<WorkerStatusTriggers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerStatusTriggers" /> class.
        /// </summary>
        /// <param name="started">Trigger to invoke when the Worker has Started.</param>
        /// <param name="completedWithResults">Trigger to invoke when the Worker has Completed (with results).</param>
        /// <param name="completedNoResults">Trigger to invoke when the Worker has Completed (no results).</param>
        /// <param name="failedToStart">Trigger to invoke when the Worker has Failed to Start.</param>
        /// <param name="failedToComplete">Trigger to invoke when the Worker has Failed to Complete.</param>
        public WorkerStatusTriggers(string started = default(string), string completedWithResults = default(string), string completedNoResults = default(string), string failedToStart = default(string), string failedToComplete = default(string))
        {
            this.Started = started;
            this.CompletedWithResults = completedWithResults;
            this.CompletedNoResults = completedNoResults;
            this.FailedToStart = failedToStart;
            this.FailedToComplete = failedToComplete;
        }

        /// <summary>
        /// Trigger to invoke when the Worker has Started
        /// </summary>
        /// <value>Trigger to invoke when the Worker has Started</value>
        [DataMember(Name = "started", EmitDefaultValue = true)]
        public string Started { get; set; }

        /// <summary>
        /// Trigger to invoke when the Worker has Completed (with results)
        /// </summary>
        /// <value>Trigger to invoke when the Worker has Completed (with results)</value>
        [DataMember(Name = "completedWithResults", EmitDefaultValue = true)]
        public string CompletedWithResults { get; set; }

        /// <summary>
        /// Trigger to invoke when the Worker has Completed (no results)
        /// </summary>
        /// <value>Trigger to invoke when the Worker has Completed (no results)</value>
        [DataMember(Name = "completedNoResults", EmitDefaultValue = true)]
        public string CompletedNoResults { get; set; }

        /// <summary>
        /// Trigger to invoke when the Worker has Failed to Start
        /// </summary>
        /// <value>Trigger to invoke when the Worker has Failed to Start</value>
        [DataMember(Name = "failedToStart", EmitDefaultValue = true)]
        public string FailedToStart { get; set; }

        /// <summary>
        /// Trigger to invoke when the Worker has Failed to Complete
        /// </summary>
        /// <value>Trigger to invoke when the Worker has Failed to Complete</value>
        [DataMember(Name = "failedToComplete", EmitDefaultValue = true)]
        public string FailedToComplete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkerStatusTriggers {\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  CompletedWithResults: ").Append(CompletedWithResults).Append("\n");
            sb.Append("  CompletedNoResults: ").Append(CompletedNoResults).Append("\n");
            sb.Append("  FailedToStart: ").Append(FailedToStart).Append("\n");
            sb.Append("  FailedToComplete: ").Append(FailedToComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerStatusTriggers);
        }

        /// <summary>
        /// Returns true if WorkerStatusTriggers instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerStatusTriggers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerStatusTriggers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Started == input.Started ||
                    (this.Started != null &&
                    this.Started.Equals(input.Started))
                ) && 
                (
                    this.CompletedWithResults == input.CompletedWithResults ||
                    (this.CompletedWithResults != null &&
                    this.CompletedWithResults.Equals(input.CompletedWithResults))
                ) && 
                (
                    this.CompletedNoResults == input.CompletedNoResults ||
                    (this.CompletedNoResults != null &&
                    this.CompletedNoResults.Equals(input.CompletedNoResults))
                ) && 
                (
                    this.FailedToStart == input.FailedToStart ||
                    (this.FailedToStart != null &&
                    this.FailedToStart.Equals(input.FailedToStart))
                ) && 
                (
                    this.FailedToComplete == input.FailedToComplete ||
                    (this.FailedToComplete != null &&
                    this.FailedToComplete.Equals(input.FailedToComplete))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Started != null)
                {
                    hashCode = (hashCode * 59) + this.Started.GetHashCode();
                }
                if (this.CompletedWithResults != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedWithResults.GetHashCode();
                }
                if (this.CompletedNoResults != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedNoResults.GetHashCode();
                }
                if (this.FailedToStart != null)
                {
                    hashCode = (hashCode * 59) + this.FailedToStart.GetHashCode();
                }
                if (this.FailedToComplete != null)
                {
                    hashCode = (hashCode * 59) + this.FailedToComplete.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
