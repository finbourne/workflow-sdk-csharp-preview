/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines a mapping for event handler properties
    /// </summary>
    [DataContract(Name = "EventHandlerMapping")]
    public partial class EventHandlerMapping : IEquatable<EventHandlerMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHandlerMapping" /> class.
        /// </summary>
        /// <param name="mapFrom">The field to map from.</param>
        /// <param name="setTo">The (constant) value to set.</param>
        public EventHandlerMapping(string mapFrom = default(string), string setTo = default(string))
        {
            this.MapFrom = mapFrom;
            this.SetTo = setTo;
        }

        /// <summary>
        /// The field to map from
        /// </summary>
        /// <value>The field to map from</value>
        [DataMember(Name = "mapFrom", EmitDefaultValue = true)]
        public string MapFrom { get; set; }

        /// <summary>
        /// The (constant) value to set
        /// </summary>
        /// <value>The (constant) value to set</value>
        [DataMember(Name = "setTo", EmitDefaultValue = true)]
        public string SetTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventHandlerMapping {\n");
            sb.Append("  MapFrom: ").Append(MapFrom).Append("\n");
            sb.Append("  SetTo: ").Append(SetTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventHandlerMapping);
        }

        /// <summary>
        /// Returns true if EventHandlerMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of EventHandlerMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventHandlerMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MapFrom == input.MapFrom ||
                    (this.MapFrom != null &&
                    this.MapFrom.Equals(input.MapFrom))
                ) && 
                (
                    this.SetTo == input.SetTo ||
                    (this.SetTo != null &&
                    this.SetTo.Equals(input.SetTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MapFrom != null)
                {
                    hashCode = (hashCode * 59) + this.MapFrom.GetHashCode();
                }
                if (this.SetTo != null)
                {
                    hashCode = (hashCode * 59) + this.SetTo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
