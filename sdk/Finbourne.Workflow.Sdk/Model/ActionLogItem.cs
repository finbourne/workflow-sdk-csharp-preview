/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// A log item for a given Action Log
    /// </summary>
    [DataContract(Name = "ActionLogItem")]
    public partial class ActionLogItem : IEquatable<ActionLogItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLogItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionLogItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLogItem" /> class.
        /// </summary>
        /// <param name="timestamp">The timestamp of the log item (required).</param>
        /// <param name="logType">The type of log item (required).</param>
        /// <param name="details">The details of the log item.</param>
        public ActionLogItem(DateTimeOffset timestamp = default(DateTimeOffset), string logType = default(string), string details = default(string))
        {
            this.Timestamp = timestamp;
            // to ensure "logType" is required (not null)
            if (logType == null)
            {
                throw new ArgumentNullException("logType is a required property for ActionLogItem and cannot be null");
            }
            this.LogType = logType;
            this.Details = details;
        }

        /// <summary>
        /// The timestamp of the log item
        /// </summary>
        /// <value>The timestamp of the log item</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// The type of log item
        /// </summary>
        /// <value>The type of log item</value>
        [DataMember(Name = "logType", IsRequired = true, EmitDefaultValue = true)]
        public string LogType { get; set; }

        /// <summary>
        /// The details of the log item
        /// </summary>
        /// <value>The details of the log item</value>
        [DataMember(Name = "details", EmitDefaultValue = true)]
        public string Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionLogItem {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionLogItem);
        }

        /// <summary>
        /// Returns true if ActionLogItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionLogItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionLogItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.LogType == input.LogType ||
                    (this.LogType != null &&
                    this.LogType.Equals(input.LogType))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.LogType != null)
                {
                    hashCode = (hashCode * 59) + this.LogType.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LogType (string) minLength
            if (this.LogType != null && this.LogType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LogType, length must be greater than 1.", new [] { "LogType" });
            }

            yield break;
        }
    }
}
