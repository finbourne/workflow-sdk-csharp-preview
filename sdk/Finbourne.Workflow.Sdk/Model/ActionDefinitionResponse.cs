/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines the Actions for a Task in a read-only form
    /// </summary>
    [DataContract(Name = "ActionDefinitionResponse")]
    public partial class ActionDefinitionResponse : IEquatable<ActionDefinitionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionDefinitionResponse" /> class.
        /// </summary>
        /// <param name="name">The Name of this Action.</param>
        /// <param name="runAsUserId">The ID of the user that this action will be performed by. If not specified, the actions will be performed by the \&quot;current user\&quot;..</param>
        /// <param name="actionDetails">actionDetails.</param>
        public ActionDefinitionResponse(string name = default(string), string runAsUserId = default(string), ActionDetailsResponse actionDetails = default(ActionDetailsResponse))
        {
            this.Name = name;
            this.RunAsUserId = runAsUserId;
            this.ActionDetails = actionDetails;
        }

        /// <summary>
        /// The Name of this Action
        /// </summary>
        /// <value>The Name of this Action</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the user that this action will be performed by. If not specified, the actions will be performed by the \&quot;current user\&quot;.
        /// </summary>
        /// <value>The ID of the user that this action will be performed by. If not specified, the actions will be performed by the \&quot;current user\&quot;.</value>
        [DataMember(Name = "runAsUserId", EmitDefaultValue = true)]
        public string RunAsUserId { get; set; }

        /// <summary>
        /// Gets or Sets ActionDetails
        /// </summary>
        [DataMember(Name = "actionDetails", EmitDefaultValue = false)]
        public ActionDetailsResponse ActionDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionDefinitionResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RunAsUserId: ").Append(RunAsUserId).Append("\n");
            sb.Append("  ActionDetails: ").Append(ActionDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionDefinitionResponse);
        }

        /// <summary>
        /// Returns true if ActionDefinitionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionDefinitionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionDefinitionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RunAsUserId == input.RunAsUserId ||
                    (this.RunAsUserId != null &&
                    this.RunAsUserId.Equals(input.RunAsUserId))
                ) && 
                (
                    this.ActionDetails == input.ActionDetails ||
                    (this.ActionDetails != null &&
                    this.ActionDetails.Equals(input.ActionDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RunAsUserId != null)
                {
                    hashCode = (hashCode * 59) + this.RunAsUserId.GetHashCode();
                }
                if (this.ActionDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ActionDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
