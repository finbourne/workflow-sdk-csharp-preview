/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Information about which states the field can be edited in
    /// </summary>
    [DataContract(Name = "ReadOnlyStates")]
    public partial class ReadOnlyStates : IEquatable<ReadOnlyStates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadOnlyStates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReadOnlyStates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadOnlyStates" /> class.
        /// </summary>
        /// <param name="stateType">The State Type (e.g. InitialState, AllStates, TerminalState, SelectedStates) (required).</param>
        /// <param name="selectedStates">Named states for which the field will be readonly - This field can only be populated if StateType &#x3D; SelectedStates.</param>
        public ReadOnlyStates(string stateType = default(string), List<string> selectedStates = default(List<string>))
        {
            // to ensure "stateType" is required (not null)
            if (stateType == null)
            {
                throw new ArgumentNullException("stateType is a required property for ReadOnlyStates and cannot be null");
            }
            this.StateType = stateType;
            this.SelectedStates = selectedStates;
        }

        /// <summary>
        /// The State Type (e.g. InitialState, AllStates, TerminalState, SelectedStates)
        /// </summary>
        /// <value>The State Type (e.g. InitialState, AllStates, TerminalState, SelectedStates)</value>
        [DataMember(Name = "stateType", IsRequired = true, EmitDefaultValue = true)]
        public string StateType { get; set; }

        /// <summary>
        /// Named states for which the field will be readonly - This field can only be populated if StateType &#x3D; SelectedStates
        /// </summary>
        /// <value>Named states for which the field will be readonly - This field can only be populated if StateType &#x3D; SelectedStates</value>
        [DataMember(Name = "selectedStates", EmitDefaultValue = true)]
        public List<string> SelectedStates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadOnlyStates {\n");
            sb.Append("  StateType: ").Append(StateType).Append("\n");
            sb.Append("  SelectedStates: ").Append(SelectedStates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadOnlyStates);
        }

        /// <summary>
        /// Returns true if ReadOnlyStates instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadOnlyStates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadOnlyStates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StateType == input.StateType ||
                    (this.StateType != null &&
                    this.StateType.Equals(input.StateType))
                ) && 
                (
                    this.SelectedStates == input.SelectedStates ||
                    this.SelectedStates != null &&
                    input.SelectedStates != null &&
                    this.SelectedStates.SequenceEqual(input.SelectedStates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StateType != null)
                {
                    hashCode = (hashCode * 59) + this.StateType.GetHashCode();
                }
                if (this.SelectedStates != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedStates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StateType (string) minLength
            if (this.StateType != null && this.StateType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateType, length must be greater than 1.", new [] { "StateType" });
            }

            yield break;
        }
    }
}
