/*
 * FINBOURNE Workflow API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.134
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines an Instance of a TaskDefinition
    /// </summary>
    [DataContract(Name = "TaskInstance")]
    public partial class TaskInstance : IEquatable<TaskInstance>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public Status? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskInstance" /> class.
        /// </summary>
        /// <param name="taskDefinitionId">taskDefinitionId.</param>
        /// <param name="taskInstanceId">The unique id for this Task Instance.</param>
        /// <param name="correlationId">User-provided ID used to link entities and tasks.</param>
        /// <param name="states">States.</param>
        /// <param name="transitions">Transitions.</param>
        /// <param name="triggers">Triggers.</param>
        /// <param name="activeState">Currently Active State.</param>
        /// <param name="status">status.</param>
        /// <param name="terminalState">True if no onward transitions are possible.</param>
        /// <param name="created">Creation timestamp.</param>
        /// <param name="updated">Last Update timestamp.</param>
        /// <param name="lastTransition">Last Transition timestamp.</param>
        /// <param name="fields">Fields and their latest values - should correspond with the Task Definition field schema.</param>
        /// <param name="receivers">A list of downstream Tasks to be invoked on completion.</param>
        /// <param name="history">A list of timestamped messages detailing what has occurred to this Task.</param>
        public TaskInstance(TaskDefinitionId taskDefinitionId = default(TaskDefinitionId), Guid taskInstanceId = default(Guid), string correlationId = default(string), List<State> states = default(List<State>), List<Transition> transitions = default(List<Transition>), List<Trigger> triggers = default(List<Trigger>), string activeState = default(string), Status? status = default(Status?), bool terminalState = default(bool), string created = default(string), string updated = default(string), string lastTransition = default(string), List<FieldInstance> fields = default(List<FieldInstance>), List<string> receivers = default(List<string>), List<HistoryEntry> history = default(List<HistoryEntry>))
        {
            this.TaskDefinitionId = taskDefinitionId;
            this.TaskInstanceId = taskInstanceId;
            this.CorrelationId = correlationId;
            this.States = states;
            this.Transitions = transitions;
            this.Triggers = triggers;
            this.ActiveState = activeState;
            this.Status = status;
            this.TerminalState = terminalState;
            this.Created = created;
            this.Updated = updated;
            this.LastTransition = lastTransition;
            this.Fields = fields;
            this.Receivers = receivers;
            this.History = history;
        }

        /// <summary>
        /// Gets or Sets TaskDefinitionId
        /// </summary>
        [DataMember(Name = "taskDefinitionId", EmitDefaultValue = false)]
        public TaskDefinitionId TaskDefinitionId { get; set; }

        /// <summary>
        /// The unique id for this Task Instance
        /// </summary>
        /// <value>The unique id for this Task Instance</value>
        [DataMember(Name = "taskInstanceId", EmitDefaultValue = false)]
        public Guid TaskInstanceId { get; set; }

        /// <summary>
        /// User-provided ID used to link entities and tasks
        /// </summary>
        /// <value>User-provided ID used to link entities and tasks</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = true)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// States
        /// </summary>
        /// <value>States</value>
        [DataMember(Name = "states", EmitDefaultValue = true)]
        public List<State> States { get; set; }

        /// <summary>
        /// Transitions
        /// </summary>
        /// <value>Transitions</value>
        [DataMember(Name = "transitions", EmitDefaultValue = true)]
        public List<Transition> Transitions { get; set; }

        /// <summary>
        /// Triggers
        /// </summary>
        /// <value>Triggers</value>
        [DataMember(Name = "triggers", EmitDefaultValue = true)]
        public List<Trigger> Triggers { get; set; }

        /// <summary>
        /// Currently Active State
        /// </summary>
        /// <value>Currently Active State</value>
        [DataMember(Name = "activeState", EmitDefaultValue = true)]
        public string ActiveState { get; set; }

        /// <summary>
        /// True if no onward transitions are possible
        /// </summary>
        /// <value>True if no onward transitions are possible</value>
        [DataMember(Name = "terminalState", EmitDefaultValue = true)]
        public bool TerminalState { get; set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        /// <value>Creation timestamp</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public string Created { get; set; }

        /// <summary>
        /// Last Update timestamp
        /// </summary>
        /// <value>Last Update timestamp</value>
        [DataMember(Name = "updated", EmitDefaultValue = true)]
        public string Updated { get; set; }

        /// <summary>
        /// Last Transition timestamp
        /// </summary>
        /// <value>Last Transition timestamp</value>
        [DataMember(Name = "lastTransition", EmitDefaultValue = true)]
        public string LastTransition { get; set; }

        /// <summary>
        /// Fields and their latest values - should correspond with the Task Definition field schema
        /// </summary>
        /// <value>Fields and their latest values - should correspond with the Task Definition field schema</value>
        [DataMember(Name = "fields", EmitDefaultValue = true)]
        public List<FieldInstance> Fields { get; set; }

        /// <summary>
        /// A list of downstream Tasks to be invoked on completion
        /// </summary>
        /// <value>A list of downstream Tasks to be invoked on completion</value>
        [DataMember(Name = "receivers", EmitDefaultValue = true)]
        public List<string> Receivers { get; set; }

        /// <summary>
        /// A list of timestamped messages detailing what has occurred to this Task
        /// </summary>
        /// <value>A list of timestamped messages detailing what has occurred to this Task</value>
        [DataMember(Name = "history", EmitDefaultValue = true)]
        public List<HistoryEntry> History { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskInstance {\n");
            sb.Append("  TaskDefinitionId: ").Append(TaskDefinitionId).Append("\n");
            sb.Append("  TaskInstanceId: ").Append(TaskInstanceId).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  ActiveState: ").Append(ActiveState).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TerminalState: ").Append(TerminalState).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  LastTransition: ").Append(LastTransition).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Receivers: ").Append(Receivers).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskInstance);
        }

        /// <summary>
        /// Returns true if TaskInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskInstance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskDefinitionId == input.TaskDefinitionId ||
                    (this.TaskDefinitionId != null &&
                    this.TaskDefinitionId.Equals(input.TaskDefinitionId))
                ) && 
                (
                    this.TaskInstanceId == input.TaskInstanceId ||
                    (this.TaskInstanceId != null &&
                    this.TaskInstanceId.Equals(input.TaskInstanceId))
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.Transitions == input.Transitions ||
                    this.Transitions != null &&
                    input.Transitions != null &&
                    this.Transitions.SequenceEqual(input.Transitions)
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    this.Triggers != null &&
                    input.Triggers != null &&
                    this.Triggers.SequenceEqual(input.Triggers)
                ) && 
                (
                    this.ActiveState == input.ActiveState ||
                    (this.ActiveState != null &&
                    this.ActiveState.Equals(input.ActiveState))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.TerminalState == input.TerminalState ||
                    this.TerminalState.Equals(input.TerminalState)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.LastTransition == input.LastTransition ||
                    (this.LastTransition != null &&
                    this.LastTransition.Equals(input.LastTransition))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Receivers == input.Receivers ||
                    this.Receivers != null &&
                    input.Receivers != null &&
                    this.Receivers.SequenceEqual(input.Receivers)
                ) && 
                (
                    this.History == input.History ||
                    this.History != null &&
                    input.History != null &&
                    this.History.SequenceEqual(input.History)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskDefinitionId != null)
                    hashCode = hashCode * 59 + this.TaskDefinitionId.GetHashCode();
                if (this.TaskInstanceId != null)
                    hashCode = hashCode * 59 + this.TaskInstanceId.GetHashCode();
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.Transitions != null)
                    hashCode = hashCode * 59 + this.Transitions.GetHashCode();
                if (this.Triggers != null)
                    hashCode = hashCode * 59 + this.Triggers.GetHashCode();
                if (this.ActiveState != null)
                    hashCode = hashCode * 59 + this.ActiveState.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.TerminalState.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.LastTransition != null)
                    hashCode = hashCode * 59 + this.LastTransition.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Receivers != null)
                    hashCode = hashCode * 59 + this.Receivers.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                return hashCode;
            }
        }

    }
}
