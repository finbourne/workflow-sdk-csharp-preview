/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Update all matching tasks based on filter matches
    /// </summary>
    [DataContract(Name = "UpdateMatchingTasksActivity")]
    public partial class UpdateMatchingTasksActivity : IEquatable<UpdateMatchingTasksActivity>, IValidatableObject
    {
        /// <summary>
        /// The type of task activity
        /// </summary>
        /// <value>The type of task activity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum UpdateMatchingTasks for value: UpdateMatchingTasks
            /// </summary>
            [EnumMember(Value = "UpdateMatchingTasks")]
            UpdateMatchingTasks = 1

        }


        /// <summary>
        /// The type of task activity
        /// </summary>
        /// <value>The type of task activity</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMatchingTasksActivity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateMatchingTasksActivity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMatchingTasksActivity" /> class.
        /// </summary>
        /// <param name="type">The type of task activity (required).</param>
        /// <param name="filter">The filter that matches on existing tasks.</param>
        /// <param name="trigger">Trigger to supply to all tasks that have been matched (required).</param>
        /// <param name="correlationIds">The event to correlation ID mappings.</param>
        /// <param name="taskFields">The event to task field mappings.</param>
        public UpdateMatchingTasksActivity(TypeEnum type = default(TypeEnum), string filter = default(string), string trigger = default(string), List<EventHandlerMapping> correlationIds = default(List<EventHandlerMapping>), Dictionary<string, FieldMapping> taskFields = default(Dictionary<string, FieldMapping>))
        {
            this.Type = type;
            // to ensure "trigger" is required (not null)
            if (trigger == null)
            {
                throw new ArgumentNullException("trigger is a required property for UpdateMatchingTasksActivity and cannot be null");
            }
            this.Trigger = trigger;
            this.Filter = filter;
            this.CorrelationIds = correlationIds;
            this.TaskFields = taskFields;
        }

        /// <summary>
        /// The filter that matches on existing tasks
        /// </summary>
        /// <value>The filter that matches on existing tasks</value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// Trigger to supply to all tasks that have been matched
        /// </summary>
        /// <value>Trigger to supply to all tasks that have been matched</value>
        [DataMember(Name = "trigger", IsRequired = true, EmitDefaultValue = true)]
        public string Trigger { get; set; }

        /// <summary>
        /// The event to correlation ID mappings
        /// </summary>
        /// <value>The event to correlation ID mappings</value>
        [DataMember(Name = "correlationIds", EmitDefaultValue = true)]
        public List<EventHandlerMapping> CorrelationIds { get; set; }

        /// <summary>
        /// The event to task field mappings
        /// </summary>
        /// <value>The event to task field mappings</value>
        [DataMember(Name = "taskFields", EmitDefaultValue = true)]
        public Dictionary<string, FieldMapping> TaskFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateMatchingTasksActivity {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  CorrelationIds: ").Append(CorrelationIds).Append("\n");
            sb.Append("  TaskFields: ").Append(TaskFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateMatchingTasksActivity);
        }

        /// <summary>
        /// Returns true if UpdateMatchingTasksActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateMatchingTasksActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateMatchingTasksActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.CorrelationIds == input.CorrelationIds ||
                    this.CorrelationIds != null &&
                    input.CorrelationIds != null &&
                    this.CorrelationIds.SequenceEqual(input.CorrelationIds)
                ) && 
                (
                    this.TaskFields == input.TaskFields ||
                    this.TaskFields != null &&
                    input.TaskFields != null &&
                    this.TaskFields.SequenceEqual(input.TaskFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Trigger != null)
                {
                    hashCode = (hashCode * 59) + this.Trigger.GetHashCode();
                }
                if (this.CorrelationIds != null)
                {
                    hashCode = (hashCode * 59) + this.CorrelationIds.GetHashCode();
                }
                if (this.TaskFields != null)
                {
                    hashCode = (hashCode * 59) + this.TaskFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Trigger (string) minLength
            if (this.Trigger != null && this.Trigger.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Trigger, length must be greater than 1.", new [] { "Trigger" });
            }

            yield break;
        }
    }
}
