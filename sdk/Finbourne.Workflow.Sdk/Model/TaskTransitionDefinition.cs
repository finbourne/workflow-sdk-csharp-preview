/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Finbourne.Workflow.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Finbourne.Workflow.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Workflow.Sdk.Model
{
    /// <summary>
    /// Defines a State change
    /// </summary>
    [DataContract(Name = "TaskTransitionDefinition")]
    public partial class TaskTransitionDefinition : IEquatable<TaskTransitionDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskTransitionDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskTransitionDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskTransitionDefinition" /> class.
        /// </summary>
        /// <param name="fromState">The State this Transition if coming From (required).</param>
        /// <param name="toState">The State this Transition is going To (required).</param>
        /// <param name="trigger">The Trigger for this Transition (required).</param>
        /// <param name="guard">The Guard for this Transition, if any.</param>
        /// <param name="action">The Action to invoke on successful Transition.</param>
        public TaskTransitionDefinition(string fromState = default(string), string toState = default(string), string trigger = default(string), string guard = default(string), string action = default(string))
        {
            // to ensure "fromState" is required (not null)
            if (fromState == null)
            {
                throw new ArgumentNullException("fromState is a required property for TaskTransitionDefinition and cannot be null");
            }
            this.FromState = fromState;
            // to ensure "toState" is required (not null)
            if (toState == null)
            {
                throw new ArgumentNullException("toState is a required property for TaskTransitionDefinition and cannot be null");
            }
            this.ToState = toState;
            // to ensure "trigger" is required (not null)
            if (trigger == null)
            {
                throw new ArgumentNullException("trigger is a required property for TaskTransitionDefinition and cannot be null");
            }
            this.Trigger = trigger;
            this.Guard = guard;
            this.Action = action;
        }

        /// <summary>
        /// The State this Transition if coming From
        /// </summary>
        /// <value>The State this Transition if coming From</value>
        [DataMember(Name = "fromState", IsRequired = true, EmitDefaultValue = true)]
        public string FromState { get; set; }

        /// <summary>
        /// The State this Transition is going To
        /// </summary>
        /// <value>The State this Transition is going To</value>
        [DataMember(Name = "toState", IsRequired = true, EmitDefaultValue = true)]
        public string ToState { get; set; }

        /// <summary>
        /// The Trigger for this Transition
        /// </summary>
        /// <value>The Trigger for this Transition</value>
        [DataMember(Name = "trigger", IsRequired = true, EmitDefaultValue = true)]
        public string Trigger { get; set; }

        /// <summary>
        /// The Guard for this Transition, if any
        /// </summary>
        /// <value>The Guard for this Transition, if any</value>
        [DataMember(Name = "guard", EmitDefaultValue = true)]
        public string Guard { get; set; }

        /// <summary>
        /// The Action to invoke on successful Transition
        /// </summary>
        /// <value>The Action to invoke on successful Transition</value>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskTransitionDefinition {\n");
            sb.Append("  FromState: ").Append(FromState).Append("\n");
            sb.Append("  ToState: ").Append(ToState).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Guard: ").Append(Guard).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskTransitionDefinition);
        }

        /// <summary>
        /// Returns true if TaskTransitionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskTransitionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskTransitionDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromState == input.FromState ||
                    (this.FromState != null &&
                    this.FromState.Equals(input.FromState))
                ) && 
                (
                    this.ToState == input.ToState ||
                    (this.ToState != null &&
                    this.ToState.Equals(input.ToState))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Guard == input.Guard ||
                    (this.Guard != null &&
                    this.Guard.Equals(input.Guard))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromState != null)
                {
                    hashCode = (hashCode * 59) + this.FromState.GetHashCode();
                }
                if (this.ToState != null)
                {
                    hashCode = (hashCode * 59) + this.ToState.GetHashCode();
                }
                if (this.Trigger != null)
                {
                    hashCode = (hashCode * 59) + this.Trigger.GetHashCode();
                }
                if (this.Guard != null)
                {
                    hashCode = (hashCode * 59) + this.Guard.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FromState (string) maxLength
            if (this.FromState != null && this.FromState.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromState, length must be less than 1024.", new [] { "FromState" });
            }

            // FromState (string) minLength
            if (this.FromState != null && this.FromState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromState, length must be greater than 1.", new [] { "FromState" });
            }

            // FromState (string) pattern
            Regex regexFromState = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexFromState.Match(this.FromState).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromState, must match a pattern of " + regexFromState, new [] { "FromState" });
            }

            // ToState (string) maxLength
            if (this.ToState != null && this.ToState.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToState, length must be less than 1024.", new [] { "ToState" });
            }

            // ToState (string) minLength
            if (this.ToState != null && this.ToState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToState, length must be greater than 1.", new [] { "ToState" });
            }

            // ToState (string) pattern
            Regex regexToState = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexToState.Match(this.ToState).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToState, must match a pattern of " + regexToState, new [] { "ToState" });
            }

            // Trigger (string) maxLength
            if (this.Trigger != null && this.Trigger.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Trigger, length must be less than 1024.", new [] { "Trigger" });
            }

            // Trigger (string) minLength
            if (this.Trigger != null && this.Trigger.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Trigger, length must be greater than 1.", new [] { "Trigger" });
            }

            // Trigger (string) pattern
            Regex regexTrigger = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexTrigger.Match(this.Trigger).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Trigger, must match a pattern of " + regexTrigger, new [] { "Trigger" });
            }

            // Guard (string) maxLength
            if (this.Guard != null && this.Guard.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Guard, length must be less than 1024.", new [] { "Guard" });
            }

            // Guard (string) minLength
            if (this.Guard != null && this.Guard.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Guard, length must be greater than 1.", new [] { "Guard" });
            }

            // Guard (string) pattern
            Regex regexGuard = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexGuard.Match(this.Guard).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Guard, must match a pattern of " + regexGuard, new [] { "Guard" });
            }

            // Action (string) maxLength
            if (this.Action != null && this.Action.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Action, length must be less than 1024.", new [] { "Action" });
            }

            // Action (string) minLength
            if (this.Action != null && this.Action.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Action, length must be greater than 1.", new [] { "Action" });
            }

            // Action (string) pattern
            Regex regexAction = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexAction.Match(this.Action).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Action, must match a pattern of " + regexAction, new [] { "Action" });
            }

            yield break;
        }
    }
}
