/*
 * FINBOURNE Workflow API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.129
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Workflow.Sdk.Client;
using Finbourne.Workflow.Sdk.Model;

namespace Finbourne.Workflow.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskDefinitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition.
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <returns>TaskDefinition</returns>
        TaskDefinition CreateTaskDefinition(CreateTaskDefinitionRequest createTaskDefinitionRequest);

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <returns>ApiResponse of TaskDefinition</returns>
        ApiResponse<TaskDefinition> CreateTaskDefinitionWithHttpInfo(CreateTaskDefinitionRequest createTaskDefinitionRequest);
        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance.
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <returns>TaskInstance</returns>
        TaskInstance CreateTaskInstance(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string));

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <returns>ApiResponse of TaskInstance</returns>
        ApiResponse<TaskInstance> CreateTaskInstanceWithHttpInfo(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string));
        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition.
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <returns>DeletedEntityResponse</returns>
        DeletedEntityResponse DeleteTaskDefinition(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <returns>ApiResponse of DeletedEntityResponse</returns>
        ApiResponse<DeletedEntityResponse> DeleteTaskDefinitionWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition.
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <returns>TaskDefinition</returns>
        TaskDefinition GetTaskDefinition(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?));

        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <returns>ApiResponse of TaskDefinition</returns>
        ApiResponse<TaskDefinition> GetTaskDefinitionWithHttpInfo(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?));
        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <returns>ResourceListOfTaskInstance</returns>
        ResourceListOfTaskInstance GetTaskInstancesForDefinition(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?));

        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfTaskInstance</returns>
        ApiResponse<ResourceListOfTaskInstance> GetTaskInstancesForDefinitionWithHttpInfo(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?));
        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition.
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <returns>TaskDefinition</returns>
        TaskDefinition UpdateTaskDefinition(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest);

        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <returns>ApiResponse of TaskDefinition</returns>
        ApiResponse<TaskDefinition> UpdateTaskDefinitionWithHttpInfo(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskDefinitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDefinition</returns>
        System.Threading.Tasks.Task<TaskDefinition> CreateTaskDefinitionAsync(CreateTaskDefinitionRequest createTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskDefinition>> CreateTaskDefinitionWithHttpInfoAsync(CreateTaskDefinitionRequest createTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInstance</returns>
        System.Threading.Tasks.Task<TaskInstance> CreateTaskInstanceAsync(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInstance>> CreateTaskInstanceWithHttpInfoAsync(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedEntityResponse</returns>
        System.Threading.Tasks.Task<DeletedEntityResponse> DeleteTaskDefinitionAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedEntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedEntityResponse>> DeleteTaskDefinitionWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDefinition</returns>
        System.Threading.Tasks.Task<TaskDefinition> GetTaskDefinitionAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskDefinition>> GetTaskDefinitionWithHttpInfoAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfTaskInstance</returns>
        System.Threading.Tasks.Task<ResourceListOfTaskInstance> GetTaskInstancesForDefinitionAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfTaskInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfTaskInstance>> GetTaskInstancesForDefinitionWithHttpInfoAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDefinition</returns>
        System.Threading.Tasks.Task<TaskDefinition> UpdateTaskDefinitionAsync(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskDefinition>> UpdateTaskDefinitionWithHttpInfoAsync(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskDefinitionsApi : ITaskDefinitionsApiSync, ITaskDefinitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskDefinitionsApi : ITaskDefinitionsApi
    {
        private Finbourne.Workflow.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskDefinitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskDefinitionsApi(String basePath)
        {
            this.Configuration = Finbourne.Workflow.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Workflow.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Workflow.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Workflow.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Workflow.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Workflow.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskDefinitionsApi(Finbourne.Workflow.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Workflow.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Workflow.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Workflow.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDefinitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskDefinitionsApi(Finbourne.Workflow.Sdk.Client.ISynchronousClient client, Finbourne.Workflow.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Workflow.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Workflow.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Workflow.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Workflow.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Workflow.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Workflow.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <returns>TaskDefinition</returns>
        public TaskDefinition CreateTaskDefinition(CreateTaskDefinitionRequest createTaskDefinitionRequest)
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> localVarResponse = CreateTaskDefinitionWithHttpInfo(createTaskDefinitionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <returns>ApiResponse of TaskDefinition</returns>
        public Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> CreateTaskDefinitionWithHttpInfo(CreateTaskDefinitionRequest createTaskDefinitionRequest)
        {
            // verify the required parameter 'createTaskDefinitionRequest' is set
            if (createTaskDefinitionRequest == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'createTaskDefinitionRequest' when calling TaskDefinitionsApi->CreateTaskDefinition");

            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createTaskDefinitionRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskDefinition>("/api/taskdefinitions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDefinition</returns>
        public async System.Threading.Tasks.Task<TaskDefinition> CreateTaskDefinitionAsync(CreateTaskDefinitionRequest createTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> localVarResponse = await CreateTaskDefinitionWithHttpInfoAsync(createTaskDefinitionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskDefinition: Create a new Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskDefinitionRequest">The data to create a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition>> CreateTaskDefinitionWithHttpInfoAsync(CreateTaskDefinitionRequest createTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTaskDefinitionRequest' is set
            if (createTaskDefinitionRequest == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'createTaskDefinitionRequest' when calling TaskDefinitionsApi->CreateTaskDefinition");


            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createTaskDefinitionRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskDefinition>("/api/taskdefinitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <returns>TaskInstance</returns>
        public TaskInstance CreateTaskInstance(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskInstance> localVarResponse = CreateTaskInstanceWithHttpInfo(scope, code, createTaskInstanceRequest, taskInstanceScope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <returns>ApiResponse of TaskInstance</returns>
        public Finbourne.Workflow.Sdk.Client.ApiResponse<TaskInstance> CreateTaskInstanceWithHttpInfo(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->CreateTaskInstance");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->CreateTaskInstance");

            // verify the required parameter 'createTaskInstanceRequest' is set
            if (createTaskInstanceRequest == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'createTaskInstanceRequest' when calling TaskDefinitionsApi->CreateTaskInstance");

            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (taskInstanceScope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToMultiMap("", "taskInstanceScope", taskInstanceScope));
            }
            localVarRequestOptions.Data = createTaskInstanceRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInstance>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInstance</returns>
        public async System.Threading.Tasks.Task<TaskInstance> CreateTaskInstanceAsync(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskInstance> localVarResponse = await CreateTaskInstanceWithHttpInfoAsync(scope, code, createTaskInstanceRequest, taskInstanceScope, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateTaskInstance: Create a new Task Instance. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of task definition to create task instance from</param>
        /// <param name="code">The code of task definition to create a task instance from</param>
        /// <param name="createTaskInstanceRequest">Request to create task instance</param>
        /// <param name="taskInstanceScope">The scope of the task instance should be in; set to &#39;default&#39; if not provided. (optional, default to &quot;default&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInstance)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Workflow.Sdk.Client.ApiResponse<TaskInstance>> CreateTaskInstanceWithHttpInfoAsync(string scope, string code, CreateTaskInstanceRequest createTaskInstanceRequest, string taskInstanceScope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->CreateTaskInstance");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->CreateTaskInstance");

            // verify the required parameter 'createTaskInstanceRequest' is set
            if (createTaskInstanceRequest == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'createTaskInstanceRequest' when calling TaskDefinitionsApi->CreateTaskInstance");


            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (taskInstanceScope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToMultiMap("", "taskInstanceScope", taskInstanceScope));
            }
            localVarRequestOptions.Data = createTaskInstanceRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInstance>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <returns>DeletedEntityResponse</returns>
        public DeletedEntityResponse DeleteTaskDefinition(string scope, string code)
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<DeletedEntityResponse> localVarResponse = DeleteTaskDefinitionWithHttpInfo(scope, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <returns>ApiResponse of DeletedEntityResponse</returns>
        public Finbourne.Workflow.Sdk.Client.ApiResponse<DeletedEntityResponse> DeleteTaskDefinitionWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->DeleteTaskDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->DeleteTaskDefinition");

            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletedEntityResponse>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletedEntityResponse</returns>
        public async System.Threading.Tasks.Task<DeletedEntityResponse> DeleteTaskDefinitionAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<DeletedEntityResponse> localVarResponse = await DeleteTaskDefinitionWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteTaskDefinition: Delete a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletedEntityResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Workflow.Sdk.Client.ApiResponse<DeletedEntityResponse>> DeleteTaskDefinitionWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->DeleteTaskDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->DeleteTaskDefinition");


            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedEntityResponse>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <returns>TaskDefinition</returns>
        public TaskDefinition GetTaskDefinition(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> localVarResponse = GetTaskDefinitionWithHttpInfo(scope, code, asAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <returns>ApiResponse of TaskDefinition</returns>
        public Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> GetTaskDefinitionWithHttpInfo(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->GetTaskDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->GetTaskDefinition");

            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskDefinition>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDefinition</returns>
        public async System.Threading.Tasks.Task<TaskDefinition> GetTaskDefinitionAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> localVarResponse = await GetTaskDefinitionWithHttpInfoAsync(scope, code, asAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskDefinition: Get a Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Definition. Default to current time if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition>> GetTaskDefinitionWithHttpInfoAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->GetTaskDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->GetTaskDefinition");


            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskDefinition>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <returns>ResourceListOfTaskInstance</returns>
        public ResourceListOfTaskInstance GetTaskInstancesForDefinition(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<ResourceListOfTaskInstance> localVarResponse = GetTaskInstancesForDefinitionWithHttpInfo(scope, code, asAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfTaskInstance</returns>
        public Finbourne.Workflow.Sdk.Client.ApiResponse<ResourceListOfTaskInstance> GetTaskInstancesForDefinitionWithHttpInfo(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->GetTaskInstancesForDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->GetTaskInstancesForDefinition");

            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfTaskInstance>("/api/taskdefinitions/{scope}/{code}/instances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskInstancesForDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfTaskInstance</returns>
        public async System.Threading.Tasks.Task<ResourceListOfTaskInstance> GetTaskInstancesForDefinitionAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<ResourceListOfTaskInstance> localVarResponse = await GetTaskInstancesForDefinitionWithHttpInfoAsync(scope, code, asAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetTaskInstancesForDefinition: Get all Task Instances based on a Task Definition 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the source Task Definition and the Task Instances so be searched under.</param>
        /// <param name="code">The code that identifies the source Task Definition</param>
        /// <param name="asAt">AsAt time to retrieve stated Task Instances. Default to latest AsAt if not provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfTaskInstance)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Workflow.Sdk.Client.ApiResponse<ResourceListOfTaskInstance>> GetTaskInstancesForDefinitionWithHttpInfoAsync(string scope, string code, DateTimeOffset? asAt = default(DateTimeOffset?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->GetTaskInstancesForDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->GetTaskInstancesForDefinition");


            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (asAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asAt", asAt));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfTaskInstance>("/api/taskdefinitions/{scope}/{code}/instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskInstancesForDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <returns>TaskDefinition</returns>
        public TaskDefinition UpdateTaskDefinition(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest)
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> localVarResponse = UpdateTaskDefinitionWithHttpInfo(scope, code, updateTaskDefinitionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <returns>ApiResponse of TaskDefinition</returns>
        public Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> UpdateTaskDefinitionWithHttpInfo(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->UpdateTaskDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->UpdateTaskDefinition");

            // verify the required parameter 'updateTaskDefinitionRequest' is set
            if (updateTaskDefinitionRequest == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'updateTaskDefinitionRequest' when calling TaskDefinitionsApi->UpdateTaskDefinition");

            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = updateTaskDefinitionRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request
            var localVarResponse = this.Client.Put<TaskDefinition>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDefinition</returns>
        public async System.Threading.Tasks.Task<TaskDefinition> UpdateTaskDefinitionAsync(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition> localVarResponse = await UpdateTaskDefinitionWithHttpInfoAsync(scope, code, updateTaskDefinitionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateTaskDefinition: Update an existing Task Definition. 
        /// </summary>
        /// <exception cref="Finbourne.Workflow.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope that identifies a Task Definition</param>
        /// <param name="code">The code that identifies a Task Definition</param>
        /// <param name="updateTaskDefinitionRequest">The data to update a Task Definition</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Workflow.Sdk.Client.ApiResponse<TaskDefinition>> UpdateTaskDefinitionWithHttpInfoAsync(string scope, string code, UpdateTaskDefinitionRequest updateTaskDefinitionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling TaskDefinitionsApi->UpdateTaskDefinition");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling TaskDefinitionsApi->UpdateTaskDefinition");

            // verify the required parameter 'updateTaskDefinitionRequest' is set
            if (updateTaskDefinitionRequest == null)
                throw new Finbourne.Workflow.Sdk.Client.ApiException(400, "Missing required parameter 'updateTaskDefinitionRequest' when calling TaskDefinitionsApi->UpdateTaskDefinition");


            Finbourne.Workflow.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Workflow.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Workflow.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Workflow.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = updateTaskDefinitionRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.1.129");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TaskDefinition>("/api/taskdefinitions/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskDefinition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}